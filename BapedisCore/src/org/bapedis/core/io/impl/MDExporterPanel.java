/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.io.impl;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import javax.swing.JFileChooser;
import org.bapedis.core.io.MD_OUTPUT_OPTION;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.project.ProjectManager;
import org.bapedis.core.ui.components.ValidationSupportUI;
import org.openide.util.Lookup;

/**
 *
 * @author loge
 */
public class MDExporterPanel extends javax.swing.JPanel implements ValidationSupportUI {
    protected JFileChooser chooser;
    protected static File parentDirectory;
    protected File selectedFile;
    protected boolean validState;
    protected final PropertyChangeSupport changeSupport;
    
    /**
     * Creates new form MDExporterPanel
     */
    public MDExporterPanel() {
        initComponents();
        chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        validState = false;
        changeSupport = new PropertyChangeSupport(this);        
    }
    
    public void setup(MDExporter exporter){
        switch(exporter.getOutput()){
            case None:
                jOptionNone.setSelected(true);
                break;
            case Z_SCORE:
                jOptionZscore.setSelected(true);
                break;
            case MIN_MAX:
                jOptionMinMax.setSelected(true);
                break;
        }
    }
    
    public void unsetup(MDExporter exporterMD){
        if (jOptionNone.isSelected()){
            exporterMD.setOutput(MD_OUTPUT_OPTION.None);
        } else if (jOptionZscore.isSelected()){
            exporterMD.setOutput(MD_OUTPUT_OPTION.Z_SCORE);
        } else if (jOptionMinMax.isSelected()){
            exporterMD.setOutput(MD_OUTPUT_OPTION.MIN_MAX);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jOptionNone = new javax.swing.JRadioButton();
        jOptionZscore = new javax.swing.JRadioButton();
        jOptionMinMax = new javax.swing.JRadioButton();
        fileLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        labelExport = new javax.swing.JLabel();
        extLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(496, 118));
        setPreferredSize(new java.awt.Dimension(496, 118));
        setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jOptionNone);
        org.openide.awt.Mnemonics.setLocalizedText(jOptionNone, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.jOptionNone.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jOptionNone, gridBagConstraints);

        buttonGroup1.add(jOptionZscore);
        org.openide.awt.Mnemonics.setLocalizedText(jOptionZscore, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.jOptionZscore.text")); // NOI18N
        jOptionZscore.setToolTipText(org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.jOptionZscore.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jOptionZscore, gridBagConstraints);

        buttonGroup1.add(jOptionMinMax);
        org.openide.awt.Mnemonics.setLocalizedText(jOptionMinMax, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.jOptionMinMax.text")); // NOI18N
        jOptionMinMax.setToolTipText(org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.jOptionMinMax.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jOptionMinMax, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.fileLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(fileLabel, gridBagConstraints);

        fileTextField.setText(org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.fileTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(fileTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 2);
        add(browseButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(labelExport, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.labelExport.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 5);
        add(labelExport, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(extLabel, org.openide.util.NbBundle.getMessage(MDExporterPanel.class, "MDExporterPanel.extLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(extLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (parentDirectory != null) {
            chooser.setCurrentDirectory(parentDirectory);
        }
        ProjectManager pm = Lookup.getDefault().lookup(ProjectManager.class);
        Workspace workspace = pm.getCurrentWorkspace();
        chooser.setSelectedFile(new File(parentDirectory, workspace.getName() + "_mds.csv"));
        int returnVal = chooser.showSaveDialog(MDExporterPanel.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileTextField.setText(chooser.getSelectedFile().getAbsolutePath());
            boolean oldValidState = validState;
            validState = true;
            changeSupport.firePropertyChange(VALID_STATE, oldValidState, validState);
        }
    }//GEN-LAST:event_browseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel extLabel;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JRadioButton jOptionMinMax;
    private javax.swing.JRadioButton jOptionNone;
    private javax.swing.JRadioButton jOptionZscore;
    private javax.swing.JLabel labelExport;
    // End of variables declaration//GEN-END:variables

    public File getSelectedFile() {
        return selectedFile;
    }
    
    @Override
    public boolean isValidState() {
        return validState;
    }

    @Override
    public void saveSettings() {
        selectedFile = new File(fileTextField.getText());
        parentDirectory = selectedFile.getParentFile();
    }

    @Override
    public void cancelSettings() {
        selectedFile = null;
    }

    @Override
    public void addValidStateListener(PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    @Override
    public void removeValidStateListener(PropertyChangeListener listener) {
        changeSupport.removePropertyChangeListener(listener);
    }
}
