/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.io.impl;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import org.bapedis.core.model.StarPepAnnotationType;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.project.ProjectManager;
import org.bapedis.core.ui.components.ValidationSupportUI;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author cicese
 */
public class MetadataExporterPanel extends javax.swing.JPanel implements ValidationSupportUI {

    protected JFileChooser chooser;
    protected static File parentDirectory;
    protected File selectedFile;
    protected boolean validState;
    protected final PropertyChangeSupport changeSupport;
    private MetadataRadioButton[] metadataOptions;
    private final ButtonGroup group;

    /**
     * Creates new form MetadataExporterPanel
     *
     * @param graphViz
     */
    public MetadataExporterPanel() {
        initComponents();
        chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        validState = false;
        changeSupport = new PropertyChangeSupport(this);
        group = new ButtonGroup();
        initMetadataOptions();
    }

    private void initMetadataOptions() {
        StarPepAnnotationType[] arr = StarPepAnnotationType.values();
        metadataOptions = new MetadataRadioButton[arr.length + 1];
        MetadataRadioButton mrb = new MetadataRadioButton(); // Default option 
        metadataOptions[0] = mrb;
        addOption(mrb, 0);
        for (int i = 0; i < arr.length; i++) {
            mrb = new MetadataRadioButton(arr[i]);
            metadataOptions[i + 1] = mrb;
            addOption(mrb, i + 1);
        }
    }

    private void addOption(MetadataRadioButton mrb, int i) {
        JRadioButton rb;
        GridBagConstraints gridBagConstraints;
        rb = mrb.getRadioButton();
        rb.setFocusable(false);
        group.add(rb);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = i + 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(2, 5, 0, 0);
        optionPanel.add(rb, gridBagConstraints);
    }

    public void setup(MetadataExporter exporter) {
        StarPepAnnotationType annotationType = exporter.getSelectedAnnotationType();
        for (int i = 0; i < metadataOptions.length; i++) {
            if (metadataOptions[i].getAnnotationType() == annotationType) {
                metadataOptions[i].getRadioButton().setSelected(true);
            }
        }
    }

    public void unsetup(MetadataExporter exporter) {
        for (int i = 0; i < metadataOptions.length; i++) {
            if (metadataOptions[i].getRadioButton().isSelected()) {
                exporter.setSelectedAnnotationType(metadataOptions[i].getAnnotationType());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        labelExport = new javax.swing.JLabel();
        optionPanel = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(496, 236));
        setPreferredSize(new java.awt.Dimension(496, 236));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(MetadataExporterPanel.class, "MetadataExporterPanel.fileLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(fileLabel, gridBagConstraints);

        fileTextField.setText(org.openide.util.NbBundle.getMessage(MetadataExporterPanel.class, "MetadataExporterPanel.fileTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        add(fileTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(MetadataExporterPanel.class, "MetadataExporterPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        add(browseButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(labelExport, org.openide.util.NbBundle.getMessage(MetadataExporterPanel.class, "MetadataExporterPanel.labelExport.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 5);
        add(labelExport, gridBagConstraints);

        optionPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 5, 5);
        add(optionPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (parentDirectory != null) {
            chooser.setCurrentDirectory(parentDirectory);
        }
        ProjectManager pm = Lookup.getDefault().lookup(ProjectManager.class);
        Workspace workspace = pm.getCurrentWorkspace();
        chooser.setSelectedFile(new File(parentDirectory, workspace.getName() + "_metadata.csv"));
        int returnVal = chooser.showSaveDialog(MetadataExporterPanel.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileTextField.setText(chooser.getSelectedFile().getAbsolutePath());
            boolean oldValidState = validState;
            validState = true;
            changeSupport.firePropertyChange(VALID_STATE, oldValidState, validState);
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel labelExport;
    private javax.swing.JPanel optionPanel;
    // End of variables declaration//GEN-END:variables

    public File getSelectedFile() {
        return selectedFile;
    }

    @Override
    public boolean isValidState() {
        return validState;
    }

    @Override
    public void saveSettings() {
        selectedFile = new File(fileTextField.getText());
        parentDirectory = selectedFile.getParentFile();
    }

    @Override
    public void cancelSettings() {
        selectedFile = null;
    }

    @Override
    public void addValidStateListener(PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    @Override
    public void removeValidStateListener(PropertyChangeListener listener) {
        changeSupport.removePropertyChangeListener(listener);
    }

    public static class MetadataRadioButton {

        private final JRadioButton radioButton;
        private final StarPepAnnotationType aType;

        public MetadataRadioButton() {
            this.aType = null;
            radioButton = new JRadioButton(NbBundle.getMessage(MetadataExporterPanel.class, "MetadataExporterPanel.RadioButton.all"));
        }

        public MetadataRadioButton(StarPepAnnotationType aType) {
            this.aType = aType;
            radioButton = new JRadioButton(aType.getLabelName());
            radioButton.setToolTipText(aType.getDescription());
        }

        public JRadioButton getRadioButton() {
            return radioButton;
        }

        public StarPepAnnotationType getAnnotationType() {
            return aType;
        }

    }
}
