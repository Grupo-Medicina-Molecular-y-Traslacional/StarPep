/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.spi.alg.impl;

import java.awt.Cursor;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.bapedis.core.spi.alg.Algorithm;
import org.bapedis.core.spi.alg.AlgorithmSetupUI;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author Loge
 */
public class EmbeddingAlgorithmPanel extends javax.swing.JPanel implements AlgorithmSetupUI {

    /**
     * Creates new form EmbeddingAlgorithmPanel
     */
    private JFileChooser chooser;
    private File inputFile;
    private DefaultListModel<String> listModel1, listModel2;

    private EmbeddingAlgorithm embeddingAlg;

    public EmbeddingAlgorithmPanel() {
        initComponents();

        listModel1 = new DefaultListModel<>();
        listModel2 = new DefaultListModel<>();

        jList1.setModel(listModel1);
        jList2.setModel(listModel2);
        jLabel5.setText(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel5.text", listModel1.size()));
        jLabel6.setText(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel6.text", listModel2.size()));
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Open FASTA file");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("FASTA format (*.fasta)", "fasta");
        chooser.addChoosableFileFilter(fileFilter);
        chooser.setFileFilter(fileFilter);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jBtBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jBtAdd = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        topPanel.add(jLabel1, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setEnabled(false);
        jTextField2.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        topPanel.add(jTextField2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jBtBrowse, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jBtBrowse.text")); // NOI18N
        jBtBrowse.setEnabled(false);
        jBtBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBrowseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        topPanel.add(jBtBrowse, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        topPanel.add(jLabel2, gridBagConstraints);

        jTextField1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        topPanel.add(jTextField1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jBtAdd, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jBtAdd.text")); // NOI18N
        jBtAdd.setToolTipText(org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jBtAdd.toolTipText")); // NOI18N
        jBtAdd.setEnabled(false);
        jBtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topPanel.add(jBtAdd, gridBagConstraints);

        add(topPanel, java.awt.BorderLayout.NORTH);

        centerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.centerPanel.border.title"))); // NOI18N
        centerPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        centerPanel.add(jLabel3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        centerPanel.add(jLabel4, gridBagConstraints);

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        centerPanel.add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setViewportView(jList2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        centerPanel.add(jScrollPane2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        centerPanel.add(jLabel5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel6.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        centerPanel.add(jLabel6, gridBagConstraints);

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        centerPanel.add(jToolBar1, gridBagConstraints);

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBrowseActionPerformed
        if (inputFile != null) {
            chooser.setCurrentDirectory(inputFile.getParentFile());
        }
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            inputFile = chooser.getSelectedFile();
            jTextField2.setText(inputFile.getAbsolutePath());
            String name = inputFile.getName();
            jTextField1.setText(name.replaceFirst("[.][^.]+$", ""));
        }
    }//GEN-LAST:event_jBtBrowseActionPerformed

    private void jBtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAddActionPerformed
        try {
            if (jTextField1.getText().trim().isEmpty()) {
                throw new Exception("The name of the database is empty");
            }
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            String ds = jTextField1.getText();
            if (jTextField2.getText().isEmpty()) {
                NotifyDescriptor nd = new NotifyDescriptor.Message(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.emptyFastaFile"), NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(nd);
                return;
            }
            inputFile = new File(jTextField2.getText());

            embeddingAlg.addDataSetFromFile(ds, inputFile);
            DefaultListModel<String> model = new DefaultListModel<>();
            model.addElement(ds);
            moveFromTo(new int[]{0}, model, listModel1);

            NotifyDescriptor nd = new NotifyDescriptor.Message(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.confirmation"), NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
        } catch (Exception ex) {
            NotifyDescriptor nd = new NotifyDescriptor.Message(ex.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
        } finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jBtAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        button1Action();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jList1.setSelectionInterval(0, listModel1.getSize() - 1);
        button1Action();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        button2Action();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jList2.setSelectionInterval(0, listModel2.getSize() - 1);
        button2Action();
    }//GEN-LAST:event_jButton4ActionPerformed

    @Override
    public JPanel getSettingPanel(Algorithm algo) {
        embeddingAlg = (EmbeddingAlgorithm) algo;
        for (String ds : embeddingAlg.selected.keySet()) {
            listModel1.addElement(ds);
        }
        for (String ds : embeddingAlg.nonSelected.keySet()) {
            listModel1.addElement(ds);
        }        
        return this;
    }

    private void button1Action() {
        int[] indices = jList1.getSelectedIndices();
        for (int i = 0; i < indices.length; i++) {
            embeddingAlg.remove(listModel1.get(indices[i]));
        }
        moveFromTo(indices, listModel1, listModel2);
    }
    
    private void button2Action() {
        int[] indices = jList2.getSelectedIndices();
        for (int i = 0; i < indices.length; i++) {
            embeddingAlg.recover(listModel2.get(indices[i]));
        }
        moveFromTo(indices, listModel2, listModel1);
    }    

    private void moveFromTo(int[] indices, DefaultListModel<String> srcModel, DefaultListModel<String> desModel) {
        for (int i = indices.length - 1; i >= 0; i--) {
            int j = 0;
            while (j < desModel.getSize() && srcModel.get(indices[i]).compareTo(desModel.get(j)) > 0) {
                j++;
            }
            desModel.insertElementAt(srcModel.get(indices[i]), j);
            srcModel.removeElementAt(indices[i]);
            jLabel5.setText(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel5.text", listModel1.size()));
            jLabel6.setText(NbBundle.getMessage(EmbeddingAlgorithmPanel.class, "EmbeddingAlgorithmPanel.jLabel6.text", listModel2.size()));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton jBtAdd;
    private javax.swing.JButton jBtBrowse;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
