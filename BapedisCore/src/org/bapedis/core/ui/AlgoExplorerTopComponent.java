/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.bapedis.core.events.WorkspaceEventListener;
import org.bapedis.core.model.AlgorithmModel;
import org.bapedis.core.model.AlgorithmNode;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.services.ProjectManager;
import org.bapedis.core.spi.algo.Algorithm;
import org.bapedis.core.spi.algo.AlgorithmFactory;
import org.bapedis.core.ui.components.richTooltip.RichTooltip;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bapedis.core.ui//AlgoExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AlgoExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bapedis.core.ui.AlgoExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AlgoExplorerAction",
        preferredID = "AlgoExplorerTopComponent"
)
@Messages({
    "CTL_AlgoExplorerAction=AlgoExplorer",
    "CTL_AlgoExplorerTopComponent=AlgoExplorer Window",
    "HINT_AlgoExplorerTopComponent=This is a AlgoExplorer window"
})
public final class AlgoExplorerTopComponent extends TopComponent implements WorkspaceEventListener, PropertyChangeListener {

    protected final ProjectManager pc;
    private RichTooltip richTooltip;

    public AlgoExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_AlgoExplorerTopComponent());
        setToolTipText(Bundle.HINT_AlgoExplorerTopComponent());
        pc = Lookup.getDefault().lookup(ProjectManager.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        algoComboBox = new javax.swing.JComboBox<>();
        infoLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        algoProvidedPanel = new javax.swing.JPanel();
        propSheetPanel = new PropertySheet();
        algoToolBar = new javax.swing.JToolBar();
        presetsButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        algoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                algoComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(algoComboBox, gridBagConstraints);

        infoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/core/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.infoLabel.text")); // NOI18N
        infoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                infoLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 7, 0, 0);
        add(infoLabel, gridBagConstraints);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/core/resources/run.gif"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.runButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(runButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(algoProvidedPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(propSheetPanel, gridBagConstraints);

        algoToolBar.setFloatable(false);
        algoToolBar.setRollover(true);
        algoToolBar.setOpaque(false);

        presetsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/core/resources/preset.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(presetsButton, org.openide.util.NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.presetsButton.text")); // NOI18N
        presetsButton.setFocusable(false);
        presetsButton.setIconTextGap(0);
        algoToolBar.add(presetsButton);

        org.openide.awt.Mnemonics.setLocalizedText(resetButton, org.openide.util.NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.resetButton.text")); // NOI18N
        resetButton.setFocusable(false);
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        algoToolBar.add(resetButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(algoToolBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void infoLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseEntered
        if (richTooltip == null) {
            AlgorithmModel algoModel = pc.getAlgorithmModel();
            if (infoLabel.isEnabled() && algoModel.getSelectedAlgorithm() != null) {
                richTooltip = buildTooltip(algoModel.getSelectedAlgorithm().getFactory());
            }
        }
        if (richTooltip != null) {
            richTooltip.showTooltip(infoLabel, evt.getLocationOnScreen());
        }
    }//GEN-LAST:event_infoLabelMouseEntered

    private void infoLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseExited
        if (richTooltip != null) {
            richTooltip.hideTooltip();
        }
    }//GEN-LAST:event_infoLabelMouseExited

    private void algoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_algoComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            AlgorithmModel algoModel = pc.getAlgorithmModel();
            if (algoComboBox.getSelectedItem() instanceof AlgorithmFactoryItem) {
                AlgorithmFactory factory = ((AlgorithmFactoryItem) algoComboBox.getSelectedItem()).getFactory();
                Workspace currentWs = pc.getCurrentWorkspace();
                Collection<? extends Algorithm> savedAlgo = currentWs.getLookup().lookupAll(Algorithm.class);
                Algorithm algorithm = null;
                for (Algorithm algo : savedAlgo) {
                    if (algo.getFactory() == factory) {
                        algorithm = algo;
                        break;
                    }
                }
                if (algorithm == null) {
                    algorithm = factory.createAlgorithm();
                    algorithm.resetPropertiesValues();
                    currentWs.add(algorithm);
                }
                algoModel.setSelectedAlgorithm(algorithm);
            } else {
                algoModel.setSelectedAlgorithm(null);
            }
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            richTooltip = null;
        }
    }//GEN-LAST:event_algoComboBoxItemStateChanged

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        AlgorithmModel algoModel = pc.getAlgorithmModel();
        Algorithm algo = algoModel.getSelectedAlgorithm();
        if (algo != null) {
            algo.resetPropertiesValues();
            refreshProperties(algoModel);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algoComboBox;
    private javax.swing.JPanel algoProvidedPanel;
    private javax.swing.JToolBar algoToolBar;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton presetsButton;
    private javax.swing.JPanel propSheetPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        pc.addWorkspaceEventListener(this);
        Workspace currentWs = pc.getCurrentWorkspace();
        workspaceChanged(null, currentWs);
    }

    @Override
    public void componentClosed() {
        pc.removeWorkspaceEventListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void workspaceChanged(Workspace oldWs, Workspace newWs) {
        if (oldWs != null) {
            AlgorithmModel oldModel = pc.getAlgorithmModel();
            oldModel.removePropertyChangeListener(this);
        }
        AlgorithmModel algoModel = pc.getAlgorithmModel(newWs);
        algoModel.addPropertyChangeListener(this);
        setAlgoModel(algoModel);
    }

    private void setAlgoModel(AlgorithmModel algoModel) {
        refreshAlgChooser(algoModel);
        refreshProperties(algoModel);
    }

    private void refreshAlgChooser(AlgorithmModel algoModel) {
        String NO_SELECTION = NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.choose.text", algoModel.getCategory().getDisplayName());
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxModel.addElement(NO_SELECTION);
        comboBoxModel.setSelectedItem(NO_SELECTION);

        List<? extends AlgorithmFactory> factories = new ArrayList<>(Lookup.getDefault().lookupAll(AlgorithmFactory.class));
        for (Iterator<? extends AlgorithmFactory> it = factories.iterator(); it.hasNext();) {
            AlgorithmFactory f = it.next();
            if (f.getCategory() != algoModel.getCategory()) {
                it.remove();
            }
        }
        Collections.sort(factories, new Comparator() {
            @Override
            public int compare(Object o1, Object o2) {
                return ((AlgorithmFactory) o1).getName().compareTo(((AlgorithmFactory) o2).getName());
            }
        });
        for (AlgorithmFactory factory : factories) {
            AlgorithmFactoryItem item = new AlgorithmFactoryItem(factory);
            comboBoxModel.addElement(item);
            if (algoModel.getSelectedAlgorithm() != null && algoModel.getSelectedAlgorithm().getFactory() == factory) {
                comboBoxModel.setSelectedItem(item);
            }
        }
        algoComboBox.setModel(comboBoxModel);
//        algoComboBox.setEnabled(!algoModel.isRunning());
    }

    private void refreshProperties(AlgorithmModel algoModel) {
        if (algoModel == null || algoModel.getSelectedAlgorithm() == null) {
            ((PropertySheet) propSheetPanel).setNodes(new Node[0]);
            algoProvidedPanel.removeAll();
            algoProvidedPanel.setVisible(false);
            propSheetPanel.setVisible(true);
        } else {
            Algorithm selectedAlgorithm = algoModel.getSelectedAlgorithm();
            AlgorithmNode algoNode = new AlgorithmNode(selectedAlgorithm);

            if (selectedAlgorithm.getFactory().getSetupUI() != null) {
                JPanel editPanel = selectedAlgorithm.getFactory().getSetupUI().getEditPanel(selectedAlgorithm);
                propSheetPanel.setVisible(false);
                algoProvidedPanel.removeAll();
                algoProvidedPanel.add(editPanel);
                algoProvidedPanel.setVisible(true);
            } else {
                algoProvidedPanel.removeAll();
                algoProvidedPanel.setVisible(false);
                ((PropertySheet) propSheetPanel).setNodes(new Node[]{algoNode});
                propSheetPanel.setVisible(true);
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() instanceof AlgorithmModel) {
            if (evt.getPropertyName().equals(AlgorithmModel.CHANGED_CATEGORY)) {
                AlgorithmModel algoModel = (AlgorithmModel) evt.getSource();
                refreshAlgChooser(algoModel);
            } else if (evt.getPropertyName().equals(AlgorithmModel.CHANGED_ALGORITHM)) {
                AlgorithmModel algoModel = (AlgorithmModel) evt.getSource();
                refreshProperties(algoModel);
            }
        }
    }

    private RichTooltip buildTooltip(AlgorithmFactory factory) {
        String description = factory.getDescription();
        RichTooltip tooltip = new RichTooltip(factory.getName(), description);
        int qualityRank = factory.getQualityRank();
        int speedRank = factory.getSpeedRank();
        if (qualityRank > 0 && qualityRank <= 5 && speedRank > 0 && speedRank <= 5) {
            LayoutDescriptionImage layoutDescriptionImage = new LayoutDescriptionImage(factory);
            tooltip.setMainImage(layoutDescriptionImage.getImage());
        }
        return tooltip;
    }

    private static class AlgorithmFactoryItem {

        private final AlgorithmFactory factory;

        public AlgorithmFactoryItem(AlgorithmFactory factory) {
            this.factory = factory;
        }

        public AlgorithmFactory getFactory() {
            return factory;
        }

        @Override
        public String toString() {
            return factory.getName();
        }
    }

    private static class LayoutDescriptionImage {

        private static final int STAR_WIDTH = 16;
        private static final int STAR_HEIGHT = 16;
        private static final int STAR_MAX = 5;
        private static final int TEXT_GAP = 5;
        private static final int LINE_GAP = 4;
        private static final int Y_BEGIN = 10;
        private static final int IMAGE_RIGHT_MARIN = 10;
        private final Image greenIcon;
        private final Image grayIcon;
        private Graphics g;
        private final String qualityStr;
        private final String speedStr;
        private int textMaxSize;
        private final AlgorithmFactory factory;

        public LayoutDescriptionImage(AlgorithmFactory factory) {
            this.factory = factory;
            greenIcon = ImageUtilities.loadImage("org/bapedis/core/resources/yellow.png");
            grayIcon = ImageUtilities.loadImage("org/bapedis/core/resources/grey.png");
            qualityStr = NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.tooltip.quality");
            speedStr = NbBundle.getMessage(AlgoExplorerTopComponent.class, "AlgoExplorerTopComponent.tooltip.speed");
        }

        public void paint(Graphics g) {
            g.setColor(Color.BLACK);
            g.drawString(qualityStr, 0, STAR_HEIGHT + Y_BEGIN - 2);
            paintStarPanel(g, textMaxSize + TEXT_GAP, Y_BEGIN, STAR_MAX, factory.getQualityRank());
            g.drawString(speedStr, 0, STAR_HEIGHT * 2 + LINE_GAP + Y_BEGIN - 2);
            paintStarPanel(g, textMaxSize + TEXT_GAP, STAR_HEIGHT + LINE_GAP + Y_BEGIN, STAR_MAX, factory.getSpeedRank());
        }

        public Image getImage() {
            //Image size
            BufferedImage im = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
            textMaxSize = 0;
            textMaxSize = Math.max(im.getGraphics().getFontMetrics().stringWidth(qualityStr), textMaxSize);
            textMaxSize = Math.max(im.getGraphics().getFontMetrics().stringWidth(speedStr), textMaxSize);
            int imageWidth = STAR_MAX * STAR_WIDTH + TEXT_GAP + textMaxSize + IMAGE_RIGHT_MARIN;

            //Paint
            BufferedImage img = new BufferedImage(imageWidth, 100, BufferedImage.TYPE_INT_ARGB);
            this.g = img.getGraphics();
            paint(g);
            return img;
        }

        public void paintStarPanel(Graphics g, int x, int y, int max, int value) {
            for (int i = 0; i < max; i++) {
                if (i < value) {
                    g.drawImage(greenIcon, x + i * 16, y, null);
                } else {
                    g.drawImage(grayIcon, x + i * 16, y, null);
                }
            }
        }
    }
}
