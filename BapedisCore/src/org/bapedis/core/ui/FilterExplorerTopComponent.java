/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JPopupMenu;
import org.bapedis.core.services.ProjectManager;
import org.bapedis.core.events.WorkspaceEventListener;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.spi.filters.FilterFactory;
import org.bapedis.core.model.FilterModel;
import org.bapedis.core.ui.actions.AddFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.DropDownButtonFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bapedis.core.ui//FilterExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FilterExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bapedis.core.ui.FilterExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FilterExplorerAction",
        preferredID = "FilterExplorerTopComponent"
)
@Messages({
    "CTL_FilterExplorerAction=FilterExplorer",
    "CTL_FilterExplorerTopComponent=Filter Explorer",
    "HINT_FilterExplorerTopComponent=This is a FilterExplorer window"
})
public final class FilterExplorerTopComponent extends TopComponent implements WorkspaceEventListener, PropertyChangeListener, LookupListener, ExplorerManager.Provider {

    protected final ExplorerManager explorerMgr;
    protected final ProjectManager pc;
    protected Lookup.Result<FilterModel> filterModelkpResult;

    public FilterExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_FilterExplorerTopComponent());
        setToolTipText(Bundle.HINT_FilterExplorerTopComponent());

        explorerMgr = new ExplorerManager();
        associateLookup(ExplorerUtils.createLookup(explorerMgr, getActionMap()));
        pc = Lookup.getDefault().lookup(ProjectManager.class);

        for (FilterModel.RestrictionLevel restriction : FilterModel.RestrictionLevel.values()) {
            restrictiveComboBox.addItem(restriction);
        }

        filterToolBar1.add(createAddFilterButton());
        List<? extends Action> actions = Utilities.actionsForPath("Actions/EditFilter");
        for (Action action : actions) {
            filterToolBar1.add(action);
        }
        viewerScrollPane.setViewportView(new ListView());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        viewerScrollPane = new javax.swing.JScrollPane();
        autoApplyCheckBox = new javax.swing.JCheckBox();
        runButton = new javax.swing.JButton();
        filterToolBar1 = new javax.swing.JToolBar();
        restrictiveComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        viewerScrollPane.setPreferredSize(new java.awt.Dimension(100, 177));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(viewerScrollPane, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(autoApplyCheckBox, org.openide.util.NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.autoApplyCheckBox.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(autoApplyCheckBox, gridBagConstraints);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/core/resources/run.gif"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(runButton, gridBagConstraints);

        filterToolBar1.setFloatable(false);
        filterToolBar1.setRollover(true);

        restrictiveComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restrictiveComboBoxActionPerformed(evt);
            }
        });
        filterToolBar1.add(restrictiveComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(filterToolBar1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void restrictiveComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restrictiveComboBoxActionPerformed
        FilterModel filterModel = getFilterModel();
        if (filterModel != null) {
            filterModel.setRestriction((FilterModel.RestrictionLevel) restrictiveComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_restrictiveComboBoxActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        run();
    }//GEN-LAST:event_runButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoApplyCheckBox;
    private javax.swing.JToolBar filterToolBar1;
    private javax.swing.JComboBox restrictiveComboBox;
    private javax.swing.JButton runButton;
    private javax.swing.JScrollPane viewerScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        pc.addWorkspaceEventListener(this);
        Workspace currentWs = pc.getCurrentWorkspace();
        workspaceChanged(null, currentWs);
    }

    @Override
    public void componentClosed() {
        pc.removeWorkspaceEventListener(this);
        removeFilterModelListener();
    }

    private void removeFilterModelListener() {
        if (filterModelkpResult != null) {
            filterModelkpResult.removeLookupListener(this);
            filterModelkpResult = null;
        }
        FilterModel filterModel = getFilterModel();
        if (filterModel != null) {
            filterModel.removePropertyChangeListener(this);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

//    private JButton createEditFilterModelButton() {
//        final JPopupMenu popup = new JPopupMenu();
//        for (Action a : Utilities.actionsForPath("Actions/EditFilterModel")) {
//            popup.add(a);
//        }
//        final JButton dropDownButton = DropDownButtonFactory.createDropDownButton(ImageUtilities.loadImageIcon("org/bapedis/db/resources/filterModel.png", false), popup);
//        dropDownButton.setToolTipText(NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.editFilterModel.tooltiptext"));
//        dropDownButton.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                popup.show(dropDownButton, 0, dropDownButton.getHeight());
//            }
//        });
//        return dropDownButton;
//    }
    private JButton createAddFilterButton() {
        final JPopupMenu popup = new JPopupMenu();
        FilterFactory[] factories = pc.getFilterFactories();
        for (final FilterFactory factory : factories) {
            popup.add(new AddFilter(factory));
        }

        final JButton dropDownButton = DropDownButtonFactory.createDropDownButton(ImageUtilities.loadImageIcon("org/bapedis/core/resources/add.png", false), popup);
        dropDownButton.setToolTipText(NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.addFilter.tooltiptext"));
        dropDownButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popup.show(dropDownButton, 0, dropDownButton.getHeight());
            }
        });
        return dropDownButton;
    }

    private FilterModel getFilterModel() {
        Workspace currentWs = pc.getCurrentWorkspace();
        return currentWs.getLookup().lookup(FilterModel.class);
    }

    private void setFilterModel(FilterModel filterModel) {
        if (filterModel != null) {
            filterModel.addPropertyChangeListener(this);
            restrictiveComboBox.setSelectedItem(filterModel.getRestriction());
            restrictiveComboBox.setVisible(true);
            explorerMgr.setRootContext(filterModel.getRootContext());
        } else {
            restrictiveComboBox.setSelectedItem(null);
            restrictiveComboBox.setVisible(false);
            explorerMgr.setRootContext(Node.EMPTY);
        }
    }

    @Override
    public void workspaceChanged(Workspace oldWs, Workspace newWs) {
        if (filterModelkpResult != null) {
            filterModelkpResult.removeLookupListener(this);
            filterModelkpResult = null;
        }
        if (oldWs != null) {
            FilterModel oldFilterModel = oldWs.getLookup().lookup(FilterModel.class);
            if (oldFilterModel != null) {
                oldFilterModel.removePropertyChangeListener(this);
            }
        }
        filterModelkpResult = newWs.getLookup().lookupResult(FilterModel.class);
        filterModelkpResult.addLookupListener(this);
        FilterModel filterModel = newWs.getLookup().lookup(FilterModel.class);
        setFilterModel(filterModel);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() instanceof FilterModel) {
//            else if (evt.getPropertyName().equals(FilterModel.IS_EMPTY)){
//                FilterModel filterModel = (FilterModel)evt.getSource();
//                boolean isEmpty = filterModel.isEmpty();
//                if (isEmpty){
//                    
//                }
//            }
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerMgr;
    }

    private void run() {
//        final NeoPeptideModelTopComponent tcPeptide = (NeoPeptideModelTopComponent) WindowManager.getDefault().findTopComponent("NeoPeptideModelTopComponent");
//        tcPeptide.setBusyLabel();
//        tcPeptide.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        tcPeptide.open();
//        tcPeptide.requestActive();
//        SwingUtilities.invokeLater(new Runnable() {
//
//            @Override
//            public void run() {
//                try {
//                    NeoPeptideManager npc = Lookup.getDefault().lookup(NeoPeptideManager.class);
//                    Workspace currentWs = pc.getCurrentWorkspace();
//                    npc.setNeoPeptidesTo(currentWs, true);
//                } catch (Exception ex) {
//                    ex.printStackTrace();
//                    tcPeptide.setErrorLabel();
//                } finally {
//                    tcPeptide.setCursor(Cursor.getDefaultCursor());
//                }
//            }
//        });
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (le.getSource().equals(filterModelkpResult)) {
            Collection<? extends FilterModel> filterModels = filterModelkpResult.allInstances();
            if (!filterModels.isEmpty()) {
                FilterModel filterModel = filterModels.iterator().next();
                setFilterModel(filterModel);
            }
        }
    }
}
