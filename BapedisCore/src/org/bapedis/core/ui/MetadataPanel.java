/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.ui;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import javax.swing.DefaultComboBoxModel;
import org.bapedis.core.model.AnnotationType;
import org.bapedis.core.model.AnnotationTypeChildFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author cicese
 */
public class MetadataPanel extends javax.swing.JPanel implements ExplorerManager.Provider{

    protected final ExplorerManager explorerMgr;
    /**
     * Creates new form LibraryPanel
     */
    public MetadataPanel() {
        initComponents();
        explorerMgr = new ExplorerManager();

        BeanTreeView view = new BeanTreeView();
        view.setRootVisible(false);
        
        centerPanel.add(view, BorderLayout.CENTER);
        
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        String NO_SELECTION = NbBundle.getMessage(MetadataPanel.class, "MetadataPanel.choose.text");
        comboBoxModel.addElement(NO_SELECTION);
        comboBoxModel.setSelectedItem(NO_SELECTION);
        
        for (AnnotationType aType : AnnotationType.values()){
            comboBoxModel.addElement(new AnnotationItem(aType));
        }
        comboBox.setModel(comboBoxModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        comboBox = new javax.swing.JComboBox<>();
        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        add(comboBox, gridBagConstraints);

        centerPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(centerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
       if (evt.getStateChange() == ItemEvent.SELECTED){
           if (comboBox.getSelectedItem() instanceof AnnotationItem){
               explorerMgr.setRootContext(((AnnotationItem)comboBox.getSelectedItem()).getRootContext());
           } else{
               explorerMgr.setRootContext(Node.EMPTY);
           }
       }
    }//GEN-LAST:event_comboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JComboBox<String> comboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerMgr;
    }
    
    private class AnnotationItem{
        private final AnnotationType annotationType;
        private final Node rootContext;

        public AnnotationItem(AnnotationType annotationType) {
            this.annotationType = annotationType;
            rootContext = new AbstractNode(Children.create(new AnnotationTypeChildFactory(annotationType), true));
        }

        public AnnotationType getAnnotationType() {
            return annotationType;
        }

        public Node getRootContext() {
            return rootContext;
        }

        @Override
        public String toString() {
            return annotationType.getDisplayName(); 
        }
        
        
        
    }
}
