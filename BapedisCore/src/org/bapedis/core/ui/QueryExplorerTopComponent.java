/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import org.bapedis.core.services.ProjectManager;
import org.bapedis.core.events.WorkspaceEventListener;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.model.Metadata;
import org.bapedis.core.model.LibraryNode;
import org.bapedis.core.model.QueryModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bapedis.db.ui//QueryExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "QueryExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.bapedis.db.ui.QueryExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_QueryExplorerAction",
        preferredID = "QueryExplorerTopComponent"
)
@Messages({
    "CTL_QueryExplorerAction= Query",
    "CTL_QueryExplorerTopComponent=Query",
    "HINT_QueryExplorerTopComponent=Query window"
})
public final class QueryExplorerTopComponent extends TopComponent implements WorkspaceEventListener, PropertyChangeListener {

    protected final ProjectManager pc;
    protected final QueryPanel queryPanel;
    protected final MetadataPanel metadataPanel;
    private static final String AUTO_APPLY = "AUTO_APPLY";

    public QueryExplorerTopComponent() {
        initComponents();

        pc = Lookup.getDefault().lookup(ProjectManager.class);

        setName(Bundle.CTL_QueryExplorerTopComponent());
        setToolTipText(Bundle.HINT_QueryExplorerTopComponent());

        metadataPanel = new MetadataPanel();
        queryPanel = new QueryPanel();

        splitPane.setLeftComponent(queryPanel);
        splitPane.setRightComponent(metadataPanel);

//        associateLookup(ExplorerUtils.createLookup(explorerMgr, getActionMap()));
        applyCheckBox.setSelected(NbPreferences.forModule(QueryModel.class).getBoolean(AUTO_APPLY, true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        applyCheckBox = new javax.swing.JCheckBox();
        splitPane = new javax.swing.JSplitPane();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(applyCheckBox, org.openide.util.NbBundle.getMessage(QueryExplorerTopComponent.class, "QueryExplorerTopComponent.applyCheckBox.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
        add(applyCheckBox, gridBagConstraints);

        splitPane.setBorder(null);
        splitPane.setDividerLocation(460);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(splitPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox applyCheckBox;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        pc.addWorkspaceEventListener(this);
        Workspace currentWs = pc.getCurrentWorkspace();
        workspaceChanged(null, currentWs);
    }

    @Override
    public void componentClosed() {
        pc.removeWorkspaceEventListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void workspaceChanged(Workspace oldWs, Workspace newWs) {
        if (oldWs != null) {
            QueryModel oldModel = pc.getQueryModel(oldWs);
            oldModel.removePropertyChangeListener(this);
            highlightCategoryFor(oldWs, false);
        }
        QueryModel newModel = pc.getQueryModel(newWs);
        newModel.addPropertyChangeListener(this);
        queryPanel.setQueryModel(newModel);
        highlightCategoryFor(newWs, true);
    }

    private void highlightCategoryFor(Workspace ws, boolean flag) {
        Collection<? extends Metadata> categories = ws.getLookup().lookupAll(Metadata.class);
        if (categories != null) {
            for (Metadata category : categories) {
                category.setSelected(flag);
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }

}
