/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.core.ui.components;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import org.bapedis.core.model.AttributesModel;
import org.bapedis.core.model.MolecularDescriptor;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.spi.algo.impl.RemoveDescriptorAlgo;
import org.bapedis.core.spi.algo.impl.RemoveDescriptorFactory;
import org.bapedis.core.task.AlgorithmExecutor;
import org.jdesktop.swingx.JXBusyLabel;
import org.openide.DialogDisplayer;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 * @author loge
 */
public class RemoveDescriptorPanel extends javax.swing.JPanel implements PropertyChangeListener {

    protected static final AlgorithmExecutor executor = Lookup.getDefault().lookup(AlgorithmExecutor.class);
    protected final Workspace workspace;
    protected RemoveDescriptorAlgo algo;
    protected final DescriptorSelectionPanel selectionPanel;
    protected final JXBusyLabel busyLabel;

    public RemoveDescriptorPanel(Workspace workspace) {
        initComponents();

        this.workspace = workspace;

        algo = workspace.getLookup().lookup(RemoveDescriptorAlgo.class);
        if (algo == null) {
            algo = (RemoveDescriptorAlgo) new RemoveDescriptorFactory().createAlgorithm();
            workspace.add(algo);
        }

        AttributesModel attrModel = workspace.getLookup().lookup(AttributesModel.class);
        selectionPanel = new DescriptorSelectionPanel(attrModel, Color.RED);
        selectionPanel.removeDescriptorRow(MolecularDescriptor.DEFAULT_CATEGORY);
        selectionPanel.setSelectedDescriptorKeys(algo.getDescriptorKeys());

        centerPanel.add(selectionPanel, BorderLayout.CENTER);

        busyLabel = new JXBusyLabel(new Dimension(20, 20));
        busyLabel.setText(NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.removing.text"));
        busyLabel.setHorizontalAlignment(SwingConstants.CENTER);
        boolean running = algo.isRunning();
        busyLabel.setBusy(running);
        busyLabel.setVisible(running);
        rightPanel.add(busyLabel);

        removeButton.setEnabled(selectionPanel.getSelectedDescriptorKeys().size() > 0);

        selectionPanel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                TableModel model = (TableModel) e.getSource();
                boolean flag = false;
                for (int row = 0; row < model.getRowCount(); row++) {
                    if ((boolean) model.getValueAt(row, 0)) {
                        flag = true;
                        algo.includeAlgorithm((String) model.getValueAt(row, 1));
                    } else {
                        algo.excludeAlgorithm((String) model.getValueAt(row, 1));
                    }
                }
                removeButton.setEnabled(flag);
            }
        });

        addAncestorListener(new AncestorListener() {
            @Override
            public void ancestorAdded(AncestorEvent event) {
                algo.addPropertyChangeListener(RemoveDescriptorPanel.this);
            }

            @Override
            public void ancestorRemoved(AncestorEvent event) {
                algo.removePropertyChangeListener(RemoveDescriptorPanel.this);
            }

            @Override
            public void ancestorMoved(AncestorEvent event) {
            }
        });
        
        sizeLabel.setText(NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.sizeLabel.text", selectionPanel.totalOfFeatures()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rightPanel = new javax.swing.JPanel();
        removeButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        sizeLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(440, 380));
        setPreferredSize(new java.awt.Dimension(540, 380));
        setLayout(new java.awt.GridBagLayout());

        rightPanel.setMaximumSize(new java.awt.Dimension(110, 58));
        rightPanel.setMinimumSize(new java.awt.Dimension(110, 58));
        rightPanel.setPreferredSize(new java.awt.Dimension(110, 58));
        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.Y_AXIS));

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/core/resources/delete.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.removeButton.text")); // NOI18N
        removeButton.setToolTipText(org.openide.util.NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.removeButton.toolTipText")); // NOI18N
        removeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        removeButton.setMaximumSize(new java.awt.Dimension(99, 29));
        removeButton.setMinimumSize(new java.awt.Dimension(99, 29));
        removeButton.setPreferredSize(new java.awt.Dimension(99, 29));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        rightPanel.add(removeButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        add(rightPanel, gridBagConstraints);

        centerPanel.setMinimumSize(new java.awt.Dimension(275, 10));
        centerPanel.setPreferredSize(new java.awt.Dimension(275, 100));
        centerPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(centerPanel, gridBagConstraints);

        sizeLabel.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        sizeLabel.setForeground(java.awt.Color.black);
        org.openide.awt.Mnemonics.setLocalizedText(sizeLabel, org.openide.util.NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.sizeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 0);
        add(sizeLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (workspace.isBusy()) {
            DialogDisplayer.getDefault().notify(workspace.getBusyNotifyDescriptor());
        } else {
            executor.execute(algo);
        }
    }//GEN-LAST:event_removeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JLabel sizeLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource().equals(algo) && evt.getPropertyName().equals(RemoveDescriptorAlgo.RUNNING)) {
            boolean running = algo.isRunning();
            busyLabel.setBusy(running);
            busyLabel.setVisible(running);
            if (!running) {
                sizeLabel.setText(NbBundle.getMessage(RemoveDescriptorPanel.class, "RemoveDescriptorPanel.sizeLabel.text", selectionPanel.totalOfFeatures()));
            }
        }
    }
}
