/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.impl;

import java.awt.Component;
import java.util.Collection;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.bapedis.chemspace.spi.SimilarityMeasureFactory;
import org.bapedis.core.spi.algo.Algorithm;
import org.bapedis.core.spi.algo.AlgorithmSetupUI;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author loge
 */
public class AbstractEmbedderPanel extends javax.swing.JPanel implements AlgorithmSetupUI {

    public static final String NETWORK_FACTORY = "network_factory";
    private final DefaultMutableTreeNode networkTeeNode, twoDTreeNode;
    private final DefaultTreeModel networkModel, twoDModel;
    private final DefaultTreeCellRenderer networkRenderer, twoDRenderer;
    private AbstractEmbedder embedder;

    /**
     * Creates new form AbstractEmbedderPanel
     */
    public AbstractEmbedderPanel() {
        initComponents();
        networkTeeNode = new DefaultMutableTreeNode(NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.NetworkEmbedder.option.name"), true);
        twoDTreeNode = new DefaultMutableTreeNode(NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.TwoDEmbedder.option.name"), true);
        populateJTrees();
        networkModel = new DefaultTreeModel(networkTeeNode);
        twoDModel = new DefaultTreeModel(twoDTreeNode);
        networkRenderer = new SimilarityFactoryNodeRenderer();
        twoDRenderer = new DefaultTreeCellRenderer();
    }

    private void populateJTrees() {
        // Similarity measures
        Collection<? extends SimilarityMeasureFactory> factories = Lookup.getDefault().lookupAll(SimilarityMeasureFactory.class);
        for (SimilarityMeasureFactory f : factories) {
            networkTeeNode.add(new SimilarityFactoryTreeNode(f));
        }

        //Two Dimensional Embedders
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jInfoLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jInfoLabel, org.openide.util.NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.jInfoLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jInfoLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        TreePath newPath = evt.getNewLeadSelectionPath();

        if (newPath != null && newPath.getLastPathComponent() instanceof SimilarityFactoryTreeNode) {
            SimilarityFactoryTreeNode newNode = (SimilarityFactoryTreeNode) newPath.getLastPathComponent();
            SimilarityMeasureFactory factory = newNode.getFactory();
            jTextArea1.setText(factory.getDescription());
            firePropertyChange(NETWORK_FACTORY, null, factory);
        } else {
            jTextArea1.setText("");
            firePropertyChange(NETWORK_FACTORY, null, null);
        }

    }//GEN-LAST:event_jTree1ValueChanged

    @Override
    public JPanel getSettingPanel(Algorithm algo) {
        embedder = (AbstractEmbedder) algo;
        if (embedder instanceof NetworkEmbedder) {
            jTree1.setModel(networkModel);
            jTree1.setCellRenderer(networkRenderer);
        } else if (embedder instanceof TwoDEmbedder){
            jTree1.setModel(twoDModel);
            jTree1.setCellRenderer(twoDRenderer);            
        } 
        return this;
    }

    private static class SimilarityFactoryTreeNode extends DefaultMutableTreeNode {

        public SimilarityFactoryTreeNode(SimilarityMeasureFactory factory) {
            super(factory, false);
        }

        public SimilarityMeasureFactory getFactory() {
            return (SimilarityMeasureFactory) userObject;
        }

        @Override
        public String toString() {
            return getFactory().getName();
        }

    }

    private static class SimilarityFactoryNodeRenderer extends DefaultTreeCellRenderer {

        Icon icon;

        public SimilarityFactoryNodeRenderer() {
            icon = ImageUtilities.loadImageIcon("org/bapedis/core/resources/network.png", false);
        }

        @Override
        public Component getTreeCellRendererComponent(
                JTree tree,
                Object value,
                boolean sel,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {

            super.getTreeCellRendererComponent(
                    tree, value, sel,
                    expanded, leaf, row,
                    hasFocus);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            if (!(node instanceof SimilarityFactoryTreeNode)) {
                // Root node
                setIcon(icon);
            }
            return this;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jInfoLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
