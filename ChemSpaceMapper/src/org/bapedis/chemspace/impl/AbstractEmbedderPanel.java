/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.bapedis.core.spi.alg.AlgorithmFactory;
import org.bapedis.core.spi.alg.AlgorithmSetupUI;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.bapedis.core.ui.components.PropertySheetPanel;

/**
 *
 * @author loge
 */
public abstract class AbstractEmbedderPanel extends javax.swing.JPanel implements AlgorithmSetupUI {

    protected final String NO_SELECTION;
    /**
     * Creates new form AbstractEmbedderPanel
     */
    public AbstractEmbedderPanel() {
        initComponents();
        NO_SELECTION = NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.choose.text");
    }
    
    
//    private void refreshAlgChooser(AlgorithmModel algoModel) {
//        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
//        comboBoxModel.addElement(NO_SELECTION);
//        comboBoxModel.setSelectedItem(NO_SELECTION);
//
//        List<? extends AlgorithmFactory> factories = new ArrayList<>(Lookup.getDefault().lookupAll(AlgorithmFactory.class));
//        for (Iterator<? extends AlgorithmFactory> it = factories.iterator(); it.hasNext();) {
//            AlgorithmFactory f = it.next();
//            if (f.getCategory() != algoModel.getCategory()) {
//                it.remove();
//            }
//        }
//
//        for (AlgorithmFactory factory : factories) {
//            AlgoExplorerTopComponent.AlgorithmFactoryItem item = new AlgoExplorerTopComponent.AlgorithmFactoryItem(factory);
//            comboBoxModel.addElement(item);
//        }
//        algoComboBox.setModel(comboBoxModel);
//        setEnableState(!comboBoxModel.getSelectedItem().equals(NO_SELECTION));
//    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        algComboBox = new javax.swing.JComboBox<>();
        infoLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        propSheetPanel = new PropertySheetPanel();

        setLayout(new java.awt.GridBagLayout());

        algComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        add(algComboBox, gridBagConstraints);

        infoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.infoLabel.text")); // NOI18N
        infoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                infoLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(infoLabel, gridBagConstraints);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/apply.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.runButton.text")); // NOI18N
        runButton.setToolTipText(org.openide.util.NbBundle.getMessage(AbstractEmbedderPanel.class, "AbstractEmbedderPanel.runButton.toolTipText")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        add(runButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(scrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(propSheetPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void algComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algComboBoxActionPerformed
//        AlgorithmModel algoModel = pc.getAlgorithmModel();
//        if (algComboBox.getSelectedItem() instanceof AlgorithmFactoryItem) {
//            AlgorithmFactory factory = ((AlgorithmFactoryItem) algComboBox.getSelectedItem()).getFactory();
//            Workspace currentWs = pc.getCurrentWorkspace();
//            Collection<? extends Algorithm> savedAlgo = currentWs.getLookup().lookupAll(Algorithm.class);
//            Algorithm algorithm = null;
//            for (Algorithm algo : savedAlgo) {
//                if (algo.getFactory() == factory) {
//                    algorithm = algo;
//                    break;
//                }
//            }
//            boolean addToWS = false;
//            if (algorithm == null) {
//                algorithm = factory.createAlgorithm();
//                addToWS = true;
//            }
//
//            if (algorithm != null) {
//                if (addToWS) {
//                    currentWs.add(algorithm);
//                }
//                algoModel.setSelectedAlgorithm(algorithm);
//                setEnableState(true);
//            } else {
//                algComboBox.setSelectedItem(NO_SELECTION);
//                setEnableState(false);
//            }
//        } else {
//            algoModel.setSelectedAlgorithm(null);
//            setEnableState(false);
//        }
    }//GEN-LAST:event_algComboBoxActionPerformed

    private void infoLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseExited
//        if (richTooltip != null) {
//            richTooltip.hideTooltip();
//        }
    }//GEN-LAST:event_infoLabelMouseExited

    private void infoLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseEntered
//        if (richTooltip == null) {
//            AlgorithmModel algoModel = pc.getAlgorithmModel();
//            if (infoLabel.isEnabled() && algoModel.getSelectedAlgorithm() != null) {
//                richTooltip = buildTooltip(algoModel.getSelectedAlgorithm().getFactory());
//            }
//        }
//        if (richTooltip != null) {
//            richTooltip.showTooltip(infoLabel, evt.getLocationOnScreen());
//        }
    }//GEN-LAST:event_infoLabelMouseEntered

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
//        AlgorithmModel algoModel = pc.getAlgorithmModel();
//        Algorithm algo = algoModel.getSelectedAlgorithm();
//        if (algo != null) {
//            if (algoModel.isRunning()) {
//                executor.cancel(algo);
//            } else {
//                Workspace currentWS = pc.getCurrentWorkspace();
//                if (currentWS.isBusy()) {
//                    DialogDisplayer.getDefault().notify(currentWS.getBusyNotifyDescriptor());
//                } else {
//                    algoModel.setRunning(true);
//                    executor.execute(algo);
//                }
//            }
//        }
    }//GEN-LAST:event_runButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algComboBox;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel propSheetPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
