/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.impl;

import java.awt.CardLayout;
import org.bapedis.chemspace.model.CompressedModel;
import org.bapedis.chemspace.model.NetworkType;

/**
 *
 * @author loge
 */
public class ChemSpaceNetworkPanel extends javax.swing.JPanel {

    protected MapperAlgorithm csMapper;

    /**
     * Creates new form NetworkPanel
     */
    public ChemSpaceNetworkPanel() {
        initComponents();
    }

    public void setUp(MapperAlgorithm csMapper) {
        this.csMapper = csMapper;
        refreshOptions();
    }

    private void refreshOptions() {
        NetworkEmbedder embedder = (NetworkEmbedder) csMapper.getChemSpaceEmbedderAlg();
        CardLayout optionSettingCL = (CardLayout) optionSettingPanel.getLayout();
        switch (embedder.getNetworkType()) {
            case FULL:
                if (!jOption1.isSelected()) {
                    jOption1.setSelected(true);
                }
                optionSettingCL.show(optionSettingPanel, "full");
                break;
            case STOCHASTIC:
                if (!jOption2.isSelected()) {
                    jOption2.setSelected(true);
                }
                optionSettingCL.show(optionSettingPanel, "stochastic");
                break;
            case COMPRESSED:
                if (!jOption3.isSelected()) {
                    jOption3.setSelected(true);
                }
                CompressedModel compressedModel = embedder.getCompressedModel();
                if (jOption3_1_Items.getSelectedIndex() != compressedModel.getStrategyIndex()) {
                    jOption3_1_Items.setSelectedIndex(compressedModel.getStrategyIndex());
                }
                String val = String.valueOf(compressedModel.getMaxSuperNodes());
                if (!jOption3_2_Items.getSelectedItem().equals(val)) {
                    jOption3_2_Items.setSelectedItem(val);
                }
                optionSettingCL.show(optionSettingPanel, "compressed");
                break;
            case NONE:
                jOption1.setSelected(false);
                jOption2.setSelected(false);
                jOption3.setSelected(false);
                optionSettingCL.show(optionSettingPanel, "none");
                break;
        }
    }

    private void setNetworkType(NetworkType type) {
        if (csMapper != null && csMapper.getChemSpaceEmbedderAlg() instanceof NetworkEmbedder) {
            NetworkEmbedder embedder = (NetworkEmbedder) csMapper.getChemSpaceEmbedderAlg();
            NetworkType oldType = embedder.getNetworkType();
            if (oldType != type) {
                embedder.setNetworkType(type);
                refreshOptions();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jApplyButton = new javax.swing.JButton();
        networkTypePanel = new javax.swing.JPanel();
        jOption1 = new javax.swing.JRadioButton();
        jOption2 = new javax.swing.JRadioButton();
        jOption3 = new javax.swing.JRadioButton();
        optionSettingPanel = new javax.swing.JPanel();
        optionNoneLabel = new javax.swing.JLabel();
        option1Panel = new javax.swing.JPanel();
        option2Panel2 = new javax.swing.JPanel();
        option3Panel = new javax.swing.JPanel();
        jBasedOnLabel = new javax.swing.JLabel();
        jOption3_1_Items = new javax.swing.JComboBox<>();
        jMaxNumberLabel = new javax.swing.JLabel();
        jOption3_2_Items = new javax.swing.JComboBox<>();
        thresholdPanel = new javax.swing.JPanel();
        jCutoffInfoLabel = new javax.swing.JLabel();
        jCutoffValueLabel = new javax.swing.JLabel();
        jCutoffToolBar = new javax.swing.JToolBar();
        jLessCutoffButton = new javax.swing.JButton();
        cutoffSlider = new javax.swing.JSlider();
        jMoreCutoffButton = new javax.swing.JButton();
        histogramPanel = new javax.swing.JPanel();
        histoInfoLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jApplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/apply.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jApplyButton, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jApplyButton.text")); // NOI18N
        jApplyButton.setToolTipText(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jApplyButton.toolTipText")); // NOI18N
        jApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jApplyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(jApplyButton, gridBagConstraints);

        networkTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.networkTypePanel.border.title"))); // NOI18N
        networkTypePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jOption1);
        org.openide.awt.Mnemonics.setLocalizedText(jOption1, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jOption1.text")); // NOI18N
        jOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOption1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        networkTypePanel.add(jOption1, gridBagConstraints);

        buttonGroup1.add(jOption2);
        org.openide.awt.Mnemonics.setLocalizedText(jOption2, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jOption2.text")); // NOI18N
        jOption2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOption2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        networkTypePanel.add(jOption2, gridBagConstraints);

        buttonGroup1.add(jOption3);
        org.openide.awt.Mnemonics.setLocalizedText(jOption3, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jOption3.text")); // NOI18N
        jOption3.setToolTipText(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jOption3.toolTipText")); // NOI18N
        jOption3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOption3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        networkTypePanel.add(jOption3, gridBagConstraints);

        optionSettingPanel.setLayout(new java.awt.CardLayout());

        optionNoneLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(optionNoneLabel, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.optionNoneLabel.text")); // NOI18N
        optionSettingPanel.add(optionNoneLabel, "card5");
        optionSettingPanel.add(option1Panel, "full");
        optionSettingPanel.add(option2Panel2, "stochastic");

        option3Panel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jBasedOnLabel, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jBasedOnLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        option3Panel.add(jBasedOnLabel, gridBagConstraints);

        jOption3_1_Items.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "communities" }));
        jOption3_1_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOption3_1_ItemsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        option3Panel.add(jOption3_1_Items, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jMaxNumberLabel, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jMaxNumberLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        option3Panel.add(jMaxNumberLabel, gridBagConstraints);

        jOption3_2_Items.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1000", "500", "250", "100", "50", "10" }));
        jOption3_2_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOption3_2_ItemsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        option3Panel.add(jOption3_2_Items, gridBagConstraints);

        optionSettingPanel.add(option3Panel, "compressed");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        networkTypePanel.add(optionSettingPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(networkTypePanel, gridBagConstraints);

        thresholdPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.thresholdPanel.border.title"))); // NOI18N
        thresholdPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jCutoffInfoLabel, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jCutoffInfoLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        thresholdPanel.add(jCutoffInfoLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jCutoffValueLabel, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jCutoffValueLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        thresholdPanel.add(jCutoffValueLabel, gridBagConstraints);

        jCutoffToolBar.setFloatable(false);
        jCutoffToolBar.setRollover(true);
        jCutoffToolBar.setPreferredSize(new java.awt.Dimension(420, 90));

        jLessCutoffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/less.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLessCutoffButton, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jLessCutoffButton.text")); // NOI18N
        jLessCutoffButton.setFocusable(false);
        jLessCutoffButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLessCutoffButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLessCutoffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLessCutoffButtonActionPerformed(evt);
            }
        });
        jCutoffToolBar.add(jLessCutoffButton);

        cutoffSlider.setMajorTickSpacing(10);
        cutoffSlider.setMinimum(50);
        cutoffSlider.setMinorTickSpacing(5);
        cutoffSlider.setPaintLabels(true);
        cutoffSlider.setPaintTicks(true);
        cutoffSlider.setToolTipText(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.cutoffSlider.toolTipText")); // NOI18N
        cutoffSlider.setMinimumSize(new java.awt.Dimension(360, 80));
        cutoffSlider.setPreferredSize(new java.awt.Dimension(360, 80));
        cutoffSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cutoffSliderStateChanged(evt);
            }
        });
        jCutoffToolBar.add(cutoffSlider);

        jMoreCutoffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/more.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jMoreCutoffButton, org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.jMoreCutoffButton.text")); // NOI18N
        jMoreCutoffButton.setFocusable(false);
        jMoreCutoffButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMoreCutoffButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jMoreCutoffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoreCutoffButtonActionPerformed(evt);
            }
        });
        jCutoffToolBar.add(jMoreCutoffButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        thresholdPanel.add(jCutoffToolBar, gridBagConstraints);

        histogramPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ChemSpaceNetworkPanel.class, "ChemSpaceNetworkPanel.histogramPanel.border.title"))); // NOI18N
        histogramPanel.setMinimumSize(new java.awt.Dimension(0, 180));
        histogramPanel.setOpaque(false);
        histogramPanel.setPreferredSize(new java.awt.Dimension(0, 180));
        histogramPanel.setLayout(new java.awt.BorderLayout());

        histoInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        histoInfoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        histoInfoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                histoInfoLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                histoInfoLabelMouseEntered(evt);
            }
        });
        histogramPanel.add(histoInfoLabel, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        thresholdPanel.add(histogramPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(thresholdPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jApplyButtonActionPerformed
        if (csMapper != null) {

            //            SimilarityMatrix matrix = csnAlgo.getSimilarityMatrix();
            //            JQuickHistogram histogram = matrix.getHistogram();
            //            float cutoff = cutoffSlider.getValue() / 100.f;
            //            if (histogram.countValues(cutoff) > CSNAlgorithm.MAX_EDGES) {
            //                NotifyDescriptor nd = new NotifyDescriptor.Message(NbBundle.getMessage(CSNAlgorithmPanel.class, "CSNAlgorithmPanel.applyCutoffValue.error", String.valueOf(CSNAlgorithm.MAX_EDGES)), NotifyDescriptor.ERROR_MESSAGE);
            //                DialogDisplayer.getDefault().notify(nd);
            //            } else {
            //                csnAlgo.setCutoffValue(cutoffSlider.getValue());
            //                ApplyCutoffValue worker = new ApplyCutoffValue(csnAlgo, jApplyButton);
            //                worker.execute();
            //            }
        }
    }//GEN-LAST:event_jApplyButtonActionPerformed

    private void jOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOption1ActionPerformed
        setNetworkType(NetworkType.FULL);
    }//GEN-LAST:event_jOption1ActionPerformed

    private void jOption2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOption2ActionPerformed
        setNetworkType(NetworkType.STOCHASTIC);
    }//GEN-LAST:event_jOption2ActionPerformed

    private void jOption3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOption3ActionPerformed
        setNetworkType(NetworkType.COMPRESSED);
    }//GEN-LAST:event_jOption3ActionPerformed

    private void jLessCutoffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLessCutoffButtonActionPerformed
        int cutoff = cutoffSlider.getValue();
        if (cutoff > cutoffSlider.getMinimum()) {
            cutoffSlider.setValue(cutoff - 1);
        }
    }//GEN-LAST:event_jLessCutoffButtonActionPerformed

    private void cutoffSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cutoffSliderStateChanged
        jCutoffValueLabel.setText(cutoffSlider.getValue() + "%");
    }//GEN-LAST:event_cutoffSliderStateChanged

    private void jMoreCutoffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoreCutoffButtonActionPerformed
        int cutoff = cutoffSlider.getValue();
        if (cutoff < cutoffSlider.getMaximum()) {
            cutoffSlider.setValue(cutoff + 1);
        }
    }//GEN-LAST:event_jMoreCutoffButtonActionPerformed

    private void histoInfoLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histoInfoLabelMouseExited
        //        if (richTooltip != null) {
        //            richTooltip.hideTooltip();
        //        }
    }//GEN-LAST:event_histoInfoLabelMouseExited

    private void histoInfoLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histoInfoLabelMouseEntered
        //        if (richTooltip != null) {
        //            richTooltip.showTooltip(histoInfoLabel, evt.getLocationOnScreen());
        //        }
    }//GEN-LAST:event_histoInfoLabelMouseEntered

    private void jOption3_1_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOption3_1_ItemsActionPerformed
        if (csMapper != null && csMapper.getChemSpaceEmbedderAlg() instanceof NetworkEmbedder) {
            NetworkEmbedder embedder = (NetworkEmbedder) csMapper.getChemSpaceEmbedderAlg();
            CompressedModel model = embedder.getCompressedModel();
            if (model.getStrategyIndex() != jOption3_1_Items.getSelectedIndex()) {
                model.setStrategyIndex(jOption3_1_Items.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_jOption3_1_ItemsActionPerformed

    private void jOption3_2_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOption3_2_ItemsActionPerformed
        if (csMapper != null && csMapper.getChemSpaceEmbedderAlg() instanceof NetworkEmbedder) {
            NetworkEmbedder embedder = (NetworkEmbedder) csMapper.getChemSpaceEmbedderAlg();
            CompressedModel model = embedder.getCompressedModel();
            String val = String.valueOf(model.getMaxSuperNodes());
            if (!val.equals(jOption3_2_Items.getSelectedItem())){
                model.setMaxSuperNodes(Integer.parseInt((String)jOption3_2_Items.getSelectedItem()));
            }
        }
    }//GEN-LAST:event_jOption3_2_ItemsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JSlider cutoffSlider;
    private javax.swing.JLabel histoInfoLabel;
    private javax.swing.JPanel histogramPanel;
    private javax.swing.JButton jApplyButton;
    private javax.swing.JLabel jBasedOnLabel;
    private javax.swing.JLabel jCutoffInfoLabel;
    private javax.swing.JToolBar jCutoffToolBar;
    private javax.swing.JLabel jCutoffValueLabel;
    private javax.swing.JButton jLessCutoffButton;
    private javax.swing.JLabel jMaxNumberLabel;
    private javax.swing.JButton jMoreCutoffButton;
    private javax.swing.JRadioButton jOption1;
    private javax.swing.JRadioButton jOption2;
    private javax.swing.JRadioButton jOption3;
    private javax.swing.JComboBox<String> jOption3_1_Items;
    private javax.swing.JComboBox<String> jOption3_2_Items;
    private javax.swing.JPanel networkTypePanel;
    private javax.swing.JPanel option1Panel;
    private javax.swing.JPanel option2Panel2;
    private javax.swing.JPanel option3Panel;
    private javax.swing.JLabel optionNoneLabel;
    private javax.swing.JPanel optionSettingPanel;
    private javax.swing.JPanel thresholdPanel;
    // End of variables declaration//GEN-END:variables
}
