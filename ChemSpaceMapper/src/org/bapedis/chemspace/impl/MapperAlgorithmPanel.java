/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.impl;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import javax.swing.SwingConstants;
import org.jdesktop.swingx.JXBusyLabel;
import org.jdesktop.swingx.JXHyperlink;
import org.openide.DialogDisplayer;
import org.openide.WizardDescriptor;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 *
 * @author loge
 */
public class MapperAlgorithmPanel extends javax.swing.JPanel {

    protected final JXHyperlink openWizardLink;
    protected final JXBusyLabel busyLabel;
    protected MapperAlgorithm csMapper;

    /**
     * Creates new form MapperAlgorithmPanel
     */
    public MapperAlgorithmPanel() {
        initComponents();

        openWizardLink = new JXHyperlink();
        configureOpenWizardLink();
        topRightPanel.add(openWizardLink);

        busyLabel = new JXBusyLabel(new Dimension(20, 20));
        busyLabel.setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void configureOpenWizardLink() {
        openWizardLink.setIcon(ImageUtilities.loadImageIcon("org/bapedis/chemspace/resources/wizard.png", false));
        openWizardLink.setText(NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.openWizardLink.text"));
        openWizardLink.setClickedColor(new java.awt.Color(0, 51, 255));
        openWizardLink.setFocusPainted(false);
        openWizardLink.setFocusable(false);
        openWizardLink.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (csMapper != null) {
                    WizardDescriptor wiz = MapperAlgorithmFactory.createWizardDescriptor(csMapper);
                    if (DialogDisplayer.getDefault().notify(wiz) == WizardDescriptor.FINISH_OPTION) {
                        MapperAlgorithmFactory.setUp(csMapper, wiz);
                        setCheSMapperAlg(csMapper);
                        MapperAlgorithmSetupUI setupUI = (MapperAlgorithmSetupUI) csMapper.getFactory().getSetupUI();
                        switch (csMapper.getChemSpaceOption()) {
                            case N_DIMENSIONAL:
                                addChemSpacePanel(setupUI.getTwoDPanel());
                                break;
                            case FULL_NETWORK:
                            case COMPRESSED_NETWORK:
                                addChemSpacePanel(setupUI.getNetworkPanel());
                        }
                    }
                }
            }
        });
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled); //To change body of generated methods, choose Tools | Templates.
        openWizardLink.setEnabled(enabled);
        centerPanel.setEnabled(enabled);
    }
    
    

    public void setBusy(boolean busy) {
        busyLabel.setBusy(busy);
        if (busy) {
            topRightPanel.add(busyLabel);
        } else {
            topRightPanel.remove(busyLabel);
        }
        openWizardLink.setEnabled(!busy);
    }

    public MapperAlgorithm getCheSMapper() {
        return csMapper;
    }

    public void setCheSMapperAlg(MapperAlgorithm csMapper) {
        this.csMapper = csMapper;
        CardLayout cl = (CardLayout) topLeftPanel.getLayout();             
        switch (csMapper.getChemSpaceOption()) {
            case N_DIMENSIONAL:
                cl.show(topLeftPanel, "nDChemSpace");   
                break;
            case FULL_NETWORK:
                cl.show(topLeftPanel, "chemSpaceNetwork");   
                break;
            case COMPRESSED_NETWORK:
                cl.show(topLeftPanel, "compressedChemSpaceNetwork");
                break;
        }        
    }

    public void addChemSpacePanel(ChemSpacePanel csPanel) {
        centerPanel.removeAll();
        if (csPanel != null) {
            centerPanel.add(csPanel, BorderLayout.CENTER);
            centerPanel.revalidate();
            centerPanel.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topLeftPanel = new javax.swing.JPanel();
        nDLabel = new javax.swing.JLabel();
        csnLabel = new javax.swing.JLabel();
        ccsnLabel = new javax.swing.JLabel();
        topRightPanel = new javax.swing.JPanel();
        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        topLeftPanel.setLayout(new java.awt.CardLayout());

        nDLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(nDLabel, org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.nDLabel.text")); // NOI18N
        nDLabel.setToolTipText(org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.nDLabel.toolTipText")); // NOI18N
        topLeftPanel.add(nDLabel, "nDChemSpace");

        csnLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(csnLabel, org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.csnLabel.text")); // NOI18N
        csnLabel.setToolTipText(org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.csnLabel.toolTipText")); // NOI18N
        topLeftPanel.add(csnLabel, "chemSpaceNetwork");

        ccsnLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(ccsnLabel, org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.ccsnLabel.text")); // NOI18N
        ccsnLabel.setToolTipText(org.openide.util.NbBundle.getMessage(MapperAlgorithmPanel.class, "MapperAlgorithmPanel.ccsnLabel.toolTipText")); // NOI18N
        topLeftPanel.add(ccsnLabel, "compressedChemSpaceNetwork");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(topLeftPanel, gridBagConstraints);

        topRightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(topRightPanel, gridBagConstraints);

        centerPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 5);
        add(centerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ccsnLabel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel csnLabel;
    private javax.swing.JLabel nDLabel;
    private javax.swing.JPanel topLeftPanel;
    private javax.swing.JPanel topRightPanel;
    // End of variables declaration//GEN-END:variables
}
