/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.impl;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.bapedis.chemspace.model.TwoDSpace;

/**
 *
 * @author loge
 */
public class NDChemSpacePanel extends javax.swing.JPanel implements PropertyChangeListener {

    protected MapperAlgorithm csMapper;

    /**
     * Creates new form NDChemSpacePanel
     */
    public NDChemSpacePanel() {
        initComponents();
    }

    public void setUp(MapperAlgorithm csMapper) {
        this.csMapper = csMapper;
        TwoDEmbedder twoDEmbedder = csMapper.getTwoDEmbedderAlg();
        int level = twoDEmbedder.getJitterLevel();
        jLevelCurrentValue.setText(String.valueOf(level));
        levelSlider.setValue(level);
        jLevelNewLabel.setVisible(false);
        jLevelNewValue.setVisible(false);
    }

    private void changeLevel(int level) {
        jLevelCurrentValue.setText(String.valueOf(level));
        jLevelNewLabel.setVisible(false);
        jLevelNewValue.setVisible(false);
        jApplyButton.setEnabled(false);
    }

    private void setRunning(boolean running) {
        jApplyButton.setEnabled(!running);
        jLevelToolBar.setEnabled(!running);
        jLessLevelButton.setEnabled(!running);
        jMoreLevelButton.setEnabled(!running);
        levelSlider.setEnabled(!running);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jApplyButton = new javax.swing.JButton();
        jitterPanel = new javax.swing.JPanel();
        jLevelCurrentLabel = new javax.swing.JLabel();
        jLevelCurrentValue = new javax.swing.JLabel();
        jLevelNewLabel = new javax.swing.JLabel();
        jLevelNewValue = new javax.swing.JLabel();
        jLevelToolBar = new javax.swing.JToolBar();
        jLessLevelButton = new javax.swing.JButton();
        levelSlider = new javax.swing.JSlider();
        jMoreLevelButton = new javax.swing.JButton();
        extLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jApplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/apply.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jApplyButton, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jApplyButton.text")); // NOI18N
        jApplyButton.setToolTipText(org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jApplyButton.toolTipText")); // NOI18N
        jApplyButton.setEnabled(false);
        jApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jApplyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(jApplyButton, gridBagConstraints);

        jitterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jitterPanel.border.title"))); // NOI18N
        jitterPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLevelCurrentLabel, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jLevelCurrentLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jitterPanel.add(jLevelCurrentLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLevelCurrentValue, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jLevelCurrentValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jitterPanel.add(jLevelCurrentValue, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLevelNewLabel, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jLevelNewLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jitterPanel.add(jLevelNewLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLevelNewValue, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jLevelNewValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jitterPanel.add(jLevelNewValue, gridBagConstraints);

        jLevelToolBar.setFloatable(false);
        jLevelToolBar.setRollover(true);
        jLevelToolBar.setPreferredSize(new java.awt.Dimension(420, 90));

        jLessLevelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/less.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLessLevelButton, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jLessLevelButton.text")); // NOI18N
        jLessLevelButton.setFocusable(false);
        jLessLevelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLessLevelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLessLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLessLevelButtonActionPerformed(evt);
            }
        });
        jLevelToolBar.add(jLessLevelButton);

        levelSlider.setMajorTickSpacing(2);
        levelSlider.setMaximum(10);
        levelSlider.setMinorTickSpacing(1);
        levelSlider.setPaintLabels(true);
        levelSlider.setPaintTicks(true);
        levelSlider.setToolTipText(org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.levelSlider.toolTipText")); // NOI18N
        levelSlider.setValue(0);
        levelSlider.setMinimumSize(new java.awt.Dimension(360, 80));
        levelSlider.setPreferredSize(new java.awt.Dimension(360, 80));
        levelSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                levelSliderStateChanged(evt);
            }
        });
        jLevelToolBar.add(levelSlider);

        jMoreLevelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/more.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jMoreLevelButton, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.jMoreLevelButton.text")); // NOI18N
        jMoreLevelButton.setFocusable(false);
        jMoreLevelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMoreLevelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jMoreLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoreLevelButtonActionPerformed(evt);
            }
        });
        jLevelToolBar.add(jMoreLevelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jitterPanel.add(jLevelToolBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(jitterPanel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(extLabel, org.openide.util.NbBundle.getMessage(NDChemSpacePanel.class, "NDChemSpacePanel.extLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        add(extLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jApplyButtonActionPerformed
        if (csMapper != null) {
            int newValue = levelSlider.getValue();
            TwoDEmbedder embedder = csMapper.getTwoDEmbedderAlg();
            if (embedder.getTwoDSpace() != null) {
                TwoDSpace twoDSpace = embedder.getTwoDSpace();
                JitterLevelUpdater updater = new JitterLevelUpdater(twoDSpace, newValue);
                updater.addPropertyChangeListener(this);
                setRunning(true);
                updater.execute();
            } else {
                changeLevel(newValue);
            }
        }
    }//GEN-LAST:event_jApplyButtonActionPerformed

    private void jLessLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLessLevelButtonActionPerformed
        int level = levelSlider.getValue();
        if (level > levelSlider.getMinimum()) {
            levelSlider.setValue(level - 1);
        }
    }//GEN-LAST:event_jLessLevelButtonActionPerformed

    private void levelSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_levelSliderStateChanged
        int level = levelSlider.getValue();
        if (level != Integer.parseInt(jLevelCurrentValue.getText())) {
            jLevelNewLabel.setVisible(true);
            jLevelNewValue.setVisible(true);
            jLevelNewValue.setText(String.valueOf(level));
            jApplyButton.setEnabled(true);
        } else {
            jLevelNewLabel.setVisible(false);
            jLevelNewValue.setVisible(false);
            jApplyButton.setEnabled(false);
            jLevelNewValue.setText("");
        }
        if (csMapper != null) {
            csMapper.getTwoDEmbedderAlg().setJitterLevel(level);
        }
    }//GEN-LAST:event_levelSliderStateChanged

    private void jMoreLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoreLevelButtonActionPerformed
        int level = levelSlider.getValue();
        if (level < levelSlider.getMaximum()) {
            levelSlider.setValue(level + 1);
        }
    }//GEN-LAST:event_jMoreLevelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel extLabel;
    private javax.swing.JButton jApplyButton;
    private javax.swing.JButton jLessLevelButton;
    private javax.swing.JLabel jLevelCurrentLabel;
    private javax.swing.JLabel jLevelCurrentValue;
    private javax.swing.JLabel jLevelNewLabel;
    private javax.swing.JLabel jLevelNewValue;
    private javax.swing.JToolBar jLevelToolBar;
    private javax.swing.JButton jMoreLevelButton;
    private javax.swing.JPanel jitterPanel;
    private javax.swing.JSlider levelSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(JitterLevelUpdater.CHANGED_LEVEL)) {
            setRunning(false);
            changeLevel((int) evt.getNewValue());
        }
    }
}
