/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.spi.impl;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.bapedis.chemspace.spi.TwoDTransformer;
import org.bapedis.chemspace.spi.TwoDTransformerSetupUI;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author Home
 */
public class WekaPCATransformerPanel extends javax.swing.JPanel implements TwoDTransformerSetupUI{

    private WekaPCATransformer pcaTransformer;
    private final NotifyDescriptor errorND;
    /**
     * Creates new form WekaPCATransformerPanel
     */
    public WekaPCATransformerPanel() {
        initComponents();
        errorND = new NotifyDescriptor.Message(NbBundle.getMessage(WekaPCATransformerPanel.class, "WekaPCATransformerPanel.errorND"), NotifyDescriptor.ERROR_MESSAGE);
        
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateVarianceCovered();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateVarianceCovered();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });        
    }
    
    private void updateVarianceCovered() {
        try {
            if (!jTextField1.getText().isEmpty()) {
                double varianceCovered = Double.parseDouble(jTextField1.getText());
                if (pcaTransformer != null && pcaTransformer.getVarianceCovered() != varianceCovered) {
                    pcaTransformer.setVarianceCovered(varianceCovered);
                }
            } 
        } catch (NumberFormatException ex) {
            DialogDisplayer.getDefault().notify(errorND);
        }
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(WekaPCATransformerPanel.class, "WekaPCATransformerPanel.jLabel1.text")); // NOI18N
        add(jLabel1);

        jTextField1.setText(org.openide.util.NbBundle.getMessage(WekaPCATransformerPanel.class, "WekaPCATransformerPanel.jTextField1.text")); // NOI18N
        jTextField1.setMinimumSize(new java.awt.Dimension(90, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(90, 20));
        add(jTextField1);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public JPanel getSettingPanel(TwoDTransformer transformer) {
        this.pcaTransformer = (WekaPCATransformer) transformer;
        jTextField1.setText(String.valueOf(pcaTransformer.getVarianceCovered()));
        return this;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
