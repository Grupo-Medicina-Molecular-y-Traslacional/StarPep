/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.wizard;

import java.awt.Component;
import java.util.Collection;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.bapedis.chemspace.distance.AbstractDistance;
import org.bapedis.chemspace.distance.DistanceFunction;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.bapedis.core.ui.components.PropertySheetPanel;

public final class VisualDistanceFunc extends JPanel {

    public static final String DISTANCE_FUNCTION = "distance_function";
    private final DefaultMutableTreeNode treeNode;
    private AbstractDistance distFunc;
    private final PropertySheetPanel propSheetPanel;

    public VisualDistanceFunc() {
        initComponents();
        treeNode = new DefaultMutableTreeNode(NbBundle.getMessage(VisualDistanceFunc.class, "DistanceFunction.root.name"), true);
        populateJTree();
        jTree1.setModel(new DefaultTreeModel(treeNode));
        jTree1.setRootVisible(true);
        jTree1.setCellRenderer(new DistanceFactoryNodeRenderer());
        propSheetPanel = new PropertySheetPanel();
        propSheetPanel.setPreferredSize(jScrollPane2.getPreferredSize());
    }

    public AbstractDistance getDistanceFunction() {
        return distFunc;
    }    

    public void setDistanceFunction(AbstractDistance distFunc) {
        this.distFunc = distFunc;
        DistanceFunctionTreeNode distNode;
        for (int i = 0; i < treeNode.getChildCount(); i++) {
            distNode = (DistanceFunctionTreeNode) treeNode.getChildAt(i);
            if (distNode.getDistanceFunction().getName().equals(distFunc.getName())) {
                jTree1.setSelectionPath(new TreePath(distNode.getPath()));
            }
        }
    }

    private void populateJTree() {
        Collection<? extends DistanceFunction> factories = Lookup.getDefault().lookupAll(DistanceFunction.class);
        for (DistanceFunction distFunc : factories) {
            if (distFunc instanceof AbstractDistance) {
                treeNode.add(new DistanceFunctionTreeNode((AbstractDistance)distFunc));
            }
        }
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(VisualDistanceFunc.class, "DistanceFunction.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jInfoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jDescLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(460, 400));
        setPreferredSize(new java.awt.Dimension(680, 460));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jInfoLabel, org.openide.util.NbBundle.getMessage(VisualDistanceFunc.class, "VisualDistanceFunc.jInfoLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jInfoLabel, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(220, 322));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(220, 322));

        jTree1.setRootVisible(false);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jDescLabel, org.openide.util.NbBundle.getMessage(VisualDistanceFunc.class, "VisualDistanceFunc.jDescLabel.text")); // NOI18N
        jDescLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jDescLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jDescLabel.setMinimumSize(new java.awt.Dimension(4, 87));
        jDescLabel.setPreferredSize(new java.awt.Dimension(4, 87));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jDescLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        TreePath newPath = evt.getNewLeadSelectionPath();
        if (newPath != null && newPath.getLastPathComponent() instanceof DistanceFunctionTreeNode) {
            DistanceFunctionTreeNode newNode = (DistanceFunctionTreeNode) newPath.getLastPathComponent();
            distFunc = newNode.getDistanceFunction();
            jDescLabel.setText(NbBundle.getMessage(VisualDistanceFunc.class, "VisualDistanceFunc.jDescLabel.text", distFunc.getName(), distFunc.getDescription()));
            jDescLabel.setVisible(true);            
        } else {
            distFunc = null;
            jDescLabel.setText("");
            jDescLabel.setVisible(false);
        }
        firePropertyChange(DISTANCE_FUNCTION, null, distFunc);
    }//GEN-LAST:event_jTree1ValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jDescLabel;
    private javax.swing.JLabel jInfoLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private static class DistanceFunctionTreeNode extends DefaultMutableTreeNode {

        public DistanceFunctionTreeNode(AbstractDistance distFunc) {
            super(distFunc, false);
        }

        public AbstractDistance getDistanceFunction() {
            return (AbstractDistance) userObject;
        }

        @Override
        public String toString() {
            return getDistanceFunction().getName();
        }

    }

    private static class DistanceFactoryNodeRenderer extends DefaultTreeCellRenderer {

        Icon icon;

        public DistanceFactoryNodeRenderer() {
            icon = ImageUtilities.loadImageIcon("org/bapedis/chemspace/resources/network.png", false);
        }

        @Override
        public Component getTreeCellRendererComponent(
                JTree tree,
                Object value,
                boolean sel,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {

            super.getTreeCellRendererComponent(
                    tree, value, sel,
                    expanded, leaf, row,
                    hasFocus);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            if (!(node instanceof DistanceFunctionTreeNode)) {
                // Root node
                setIcon(icon);
            }
            return this;
        }
    }

}
