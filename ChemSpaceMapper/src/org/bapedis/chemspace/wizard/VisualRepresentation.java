/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.chemspace.wizard;

import javax.swing.JPanel;
import org.bapedis.chemspace.model.ChemSpaceOption;
import org.bapedis.chemspace.model.NetworkType;
import org.openide.util.NbBundle;

public final class VisualRepresentation extends JPanel {

    static final String CHANGED_CHEM_SPACE = "chemspace_option";

    private ChemSpaceOption csOption;
    private NetworkType networkType;

    public VisualRepresentation() {
        initComponents();
        csOption = ChemSpaceOption.NONE;
        networkType = NetworkType.FULL;

        setChemSpaceOption(csOption);
        setNetworkType(networkType);

        extLabel.setText(NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.extLabel.text"));
    }

    public ChemSpaceOption getChemSpaceOption() {
        return csOption;
    }

    public void setChemSpaceOption(ChemSpaceOption csOption) {
        ChemSpaceOption oldOption = this.csOption;
        this.csOption = csOption;

        switch (csOption) {
            case CHEM_SPACE_NETWORK:
                if (!jOptionCSN.isSelected()) {
                    jOptionCSN.setSelected(true);
                }
                break;
            case SEQ_SIMILARITY_NETWORK:
                if (!jOptionSSN.isSelected()) {
                    jOptionSSN.setSelected(true);
                }
                break;
            default:
                jOptionCSN.setSelected(false);
                jOptionSSN.setSelected(false);
                jHSPCheckBox.setSelected(false);

        }
        firePropertyChange(CHANGED_CHEM_SPACE, oldOption, csOption);
    }

    public NetworkType getNetworkType() {
        return networkType;
    }

    public void setNetworkType(NetworkType networkType) {
        this.networkType = networkType;
        switch (networkType) {
            case FULL:
                if (jHSPCheckBox.isSelected()) {
                    jHSPCheckBox.setSelected(false);
                }
                break;
            case HSP:
                if (!jHSPCheckBox.isSelected()) {
                    jHSPCheckBox.setSelected(true);
                }
                break;
        }
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(VisualRepresentation.class, "ChemSpaceRepresentation.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jQuestionLabel = new javax.swing.JLabel();
        coordinateFreePanel = new javax.swing.JPanel();
        jOptionCSN = new javax.swing.JRadioButton();
        jHSPCheckBox = new javax.swing.JCheckBox();
        jOptionSSN = new javax.swing.JRadioButton();
        bottomPanel = new javax.swing.JPanel();
        extLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(460, 400));
        setPreferredSize(new java.awt.Dimension(500, 460));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jQuestionLabel, org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.jQuestionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jQuestionLabel, gridBagConstraints);

        coordinateFreePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.coordinateFreePanel.border.title"))); // NOI18N
        coordinateFreePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jOptionCSN);
        org.openide.awt.Mnemonics.setLocalizedText(jOptionCSN, org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.jOptionCSN.text")); // NOI18N
        jOptionCSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOptionCSNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        coordinateFreePanel.add(jOptionCSN, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jHSPCheckBox, org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.jHSPCheckBox.text")); // NOI18N
        jHSPCheckBox.setEnabled(false);
        jHSPCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHSPCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
        coordinateFreePanel.add(jHSPCheckBox, gridBagConstraints);

        buttonGroup1.add(jOptionSSN);
        org.openide.awt.Mnemonics.setLocalizedText(jOptionSSN, org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.jOptionSSN.text")); // NOI18N
        jOptionSSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOptionSSNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        coordinateFreePanel.add(jOptionSSN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(coordinateFreePanel, gridBagConstraints);

        bottomPanel.setLayout(new java.awt.GridBagLayout());

        extLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/chemspace/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(extLabel, org.openide.util.NbBundle.getMessage(VisualRepresentation.class, "VisualRepresentation.extLabel.text")); // NOI18N
        extLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bottomPanel.add(extLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(bottomPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jHSPCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHSPCheckBoxActionPerformed
        setNetworkType(jHSPCheckBox.isSelected() ? NetworkType.HSP : NetworkType.FULL);
    }//GEN-LAST:event_jHSPCheckBoxActionPerformed

    private void jOptionCSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOptionCSNActionPerformed
        setChemSpaceOption(ChemSpaceOption.CHEM_SPACE_NETWORK);
    }//GEN-LAST:event_jOptionCSNActionPerformed

    private void jOptionSSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOptionSSNActionPerformed
        setChemSpaceOption(ChemSpaceOption.SEQ_SIMILARITY_NETWORK);
    }//GEN-LAST:event_jOptionSSNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel coordinateFreePanel;
    private javax.swing.JLabel extLabel;
    private javax.swing.JCheckBox jHSPCheckBox;
    private javax.swing.JRadioButton jOptionCSN;
    private javax.swing.JRadioButton jOptionSSN;
    private javax.swing.JLabel jQuestionLabel;
    // End of variables declaration//GEN-END:variables
}
