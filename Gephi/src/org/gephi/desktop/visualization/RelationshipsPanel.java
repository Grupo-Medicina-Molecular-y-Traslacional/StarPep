/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.desktop.visualization;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.Locale;
import javax.swing.JCheckBox;
import org.bapedis.core.model.AnnotationType;
import org.bapedis.core.model.GraphViz;

/**
 *
 * @author loge
 */
public class RelationshipsPanel extends javax.swing.JPanel {

    private MetadataCheckBox[] metadataCheckBoxs;
    
    /**
     * Creates new form RelationshipsPanel
     */
    public RelationshipsPanel(GraphViz graphViz) {
        initComponents();
        initMetadataPanel(graphViz);
    }
    
    private void initMetadataPanel(GraphViz graphViz) {
        GridBagConstraints gridBagConstraints;
        AnnotationType[] arr = AnnotationType.values();
        metadataCheckBoxs = new MetadataCheckBox[arr.length];
        MetadataCheckBox mcb;
        JCheckBox cb;
        for (int i = 0; i < arr.length; i++) {
            mcb = new MetadataCheckBox(arr[i]);
            metadataCheckBoxs[i] = mcb;
            cb = mcb.getCheckBox();
            cb.setFocusable(false);
            cb.setSelected(graphViz.isDisplayedMetadata(arr[i]));
            gridBagConstraints = new GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = i;
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.anchor = GridBagConstraints.WEST;
            gridBagConstraints.insets = new Insets(2, 5, 0, 0);
            metadataPanel.add(cb, gridBagConstraints);
        }
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabPane = new javax.swing.JTabbedPane();
        tabPanel1 = new javax.swing.JPanel();
        metadataInfoLabel = new javax.swing.JLabel();
        metadataPanel = new javax.swing.JPanel();
        similarityPanel = new javax.swing.JPanel();
        csnCheckBox = new javax.swing.JCheckBox();
        histogramPanel = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        thesholdPanel = new javax.swing.JPanel();
        thresholdSlider = new javax.swing.JSlider();
        java.text.NumberFormat format = java.text.DecimalFormat.getInstance(Locale.ENGLISH);
        format.setMinimumFractionDigits(2);
        format.setMaximumFractionDigits(2);
        format.setRoundingMode(java.math.RoundingMode.HALF_UP);
        javax.swing.text.NumberFormatter textFormatter = new javax.swing.text.NumberFormatter(format);
        textFormatter.setValueClass(Float.class);
        textFormatter.setMinimum(0f);
        textFormatter.setMaximum(1f);
        textFormatter.setAllowsInvalid(false);
        newValueTextField = new javax.swing.JFormattedTextField(textFormatter);

        setMinimumSize(new java.awt.Dimension(440, 280));
        setPreferredSize(new java.awt.Dimension(440, 280));
        setLayout(new java.awt.BorderLayout());

        tabPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(metadataInfoLabel, org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.metadataInfoLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        tabPanel1.add(metadataInfoLabel, gridBagConstraints);

        metadataPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tabPanel1.add(metadataPanel, gridBagConstraints);

        tabPane.addTab(org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.tabPanel1.TabConstraints.tabTitle"), tabPanel1); // NOI18N

        similarityPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(csnCheckBox, org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.csnCheckBox.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        similarityPanel.add(csnCheckBox, gridBagConstraints);

        histogramPanel.setMinimumSize(new java.awt.Dimension(0, 180));
        histogramPanel.setOpaque(false);
        histogramPanel.setPreferredSize(new java.awt.Dimension(0, 180));
        histogramPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        similarityPanel.add(histogramPanel, gridBagConstraints);

        infoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                infoLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        similarityPanel.add(infoLabel, gridBagConstraints);

        thesholdPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.thesholdPanel.border.title"))); // NOI18N
        thesholdPanel.setLayout(new java.awt.GridBagLayout());

        thresholdSlider.setToolTipText(org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.thresholdSlider.toolTipText")); // NOI18N
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        thesholdPanel.add(thresholdSlider, gridBagConstraints);

        newValueTextField.setText(org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.newValueTextField.text")); // NOI18N
        newValueTextField.setMinimumSize(new java.awt.Dimension(50, 26));
        newValueTextField.setPreferredSize(new java.awt.Dimension(50, 26));
        newValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newValueTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        thesholdPanel.add(newValueTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        similarityPanel.add(thesholdPanel, gridBagConstraints);

        tabPane.addTab(org.openide.util.NbBundle.getMessage(RelationshipsPanel.class, "RelationshipsPanel.similarityPanel.TabConstraints.tabTitle"), similarityPanel); // NOI18N

        add(tabPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void infoLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseExited
//        if (richTooltip != null) {
//            richTooltip.hideTooltip();
//        }
    }//GEN-LAST:event_infoLabelMouseExited

    private void infoLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLabelMouseEntered
//        if (richTooltip != null) {
//            richTooltip.showTooltip(infoLabel, evt.getLocationOnScreen());
//        }
    }//GEN-LAST:event_infoLabelMouseEntered

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
//        String newTextValue = formatter.format(thresholdSlider.getValue() / 100.);
//        if (!newValueTextField.getText().equals(newTextValue)) {
//            newValueTextField.setText(newTextValue);
//        }
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void newValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newValueTextFieldActionPerformed
        int newVal = Math.round(Float.parseFloat(newValueTextField.getText()) * 100);
        if (thresholdSlider.getValue() != newVal) {
            thresholdSlider.setValue(newVal);
        }
    }//GEN-LAST:event_newValueTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox csnCheckBox;
    private javax.swing.JPanel histogramPanel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel metadataInfoLabel;
    private javax.swing.JPanel metadataPanel;
    private javax.swing.JTextField newValueTextField;
    private javax.swing.JPanel similarityPanel;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JPanel tabPanel1;
    private javax.swing.JPanel thesholdPanel;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables
}

class MetadataCheckBox {

    private final JCheckBox cb;
    private final AnnotationType aType;

    public MetadataCheckBox(AnnotationType aType) {
        this.aType = aType;
        cb = new JCheckBox(aType.getDisplayName());
    }

    public JCheckBox getCheckBox() {
        return cb;
    }

    public AnnotationType getAnnotationType() {
        return aType;
    }

}