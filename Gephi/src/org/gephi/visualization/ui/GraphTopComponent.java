/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.visualization.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.Random;
import org.bapedis.core.model.Workspace;
import org.bapedis.core.services.ProjectManager;
import org.gephi.graph.api.Graph;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphFactory;
import org.gephi.graph.api.GraphModel;
import org.gephi.preview.api.G2DTarget;
import org.gephi.preview.api.PreviewController;
import org.gephi.preview.api.PreviewModel;
import org.gephi.preview.api.PreviewProperty;
import org.gephi.preview.api.RenderTarget;
import org.gephi.preview.types.DependantOriginalColor;
import org.gephi.visualization.VizController;
import org.gephi.visualization.apiimpl.GraphDrawable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.gephi.visualization.ui//Graph//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GraphTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gephi.visualization.ui.GraphTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GraphAction",
        preferredID = "GraphTopComponent"
)
@Messages({
    "CTL_GraphAction=Graph",
    "CTL_GraphTopComponent=Graph Window",
    "HINT_GraphTopComponent=This is a Graph window"
})
public final class GraphTopComponent extends TopComponent {

    private GraphDrawable drawable;

    public GraphTopComponent() {
        initComponents();
        setName(Bundle.CTL_GraphTopComponent());
        setToolTipText(Bundle.HINT_GraphTopComponent());

        //Create graph
//        GraphController gc = Lookup.getDefault().lookup(GraphController.class);
//        ProjectManager pm = Lookup.getDefault().lookup(ProjectManager.class);
//        Workspace w = pm.getCurrentWorkspace();
//        GraphModel graphModel = gc.getGraphModel();
//        GraphFactory factory = graphModel.factory();
//        Random r = new Random();
//        Graph g = graphModel.getGraph();
//        for (int i = 0; i < 1000; i++) {
//            org.gephi.graph.api.Node n1 = factory.newNode();
//            org.gephi.graph.api.Node n2 = factory.newNode();
//            n1.setSize(20);
//            n2.setSize(40);
//            n1.setX(i*10);
//            n1.setY(i*5);
//            g.addNode(n1);
//            g.addNode(n2);
//            if (r.nextDouble() > 0.5) {
//                org.gephi.graph.api.Edge e = factory.newEdge(n2, n1);
//                g.addEdge(e);
//            }
//        }

//        DefaultScaler scaler = new DefaultScaler();
//        scaler.doScale(g);

        drawable = VizController.getInstance().getDrawable();
        centerPanel.add(drawable.getGraphComponent(), BorderLayout.CENTER);

//        //Preview configuration
//        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
//        PreviewModel previewModel = previewController.getModel();
//        previewModel.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);
//        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_COLOR, new DependantOriginalColor(Color.WHITE));
//        previewModel.getProperties().putValue(PreviewProperty.EDGE_CURVED, Boolean.FALSE);
//        previewModel.getProperties().putValue(PreviewProperty.EDGE_OPACITY, 50);
//        previewModel.getProperties().putValue(PreviewProperty.BACKGROUND_COLOR, Color.BLACK);
//        
//       //New Processing target, get the PApplet
//        G2DTarget target = (G2DTarget) previewController.getRenderTarget(RenderTarget.G2D_TARGET);
//        final PreviewSketch previewSketch = new PreviewSketch(target);
//        previewController.refreshPreview();
//        
//        centerPanel.add(previewSketch, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.BorderLayout());
        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
//        GraphController gc = Lookup.getDefault().lookup(GraphController.class);
//        ProjectManager pm = Lookup.getDefault().lookup(ProjectManager.class);
//        Workspace w = pm.getCurrentWorkspace();
//        GraphModel graphModel = gc.getGraphModel();
//        GraphFactory factory = graphModel.factory();
//        org.gephi.graph.api.Node n1 = factory.newNode();
//        org.gephi.graph.api.Node n2 = factory.newNode();
//        org.gephi.graph.api.Edge e = factory.newEdge(n2, n1);
//        Graph g = graphModel.getGraph();
//        g.addNode(n1);
//        g.addNode(n2);
//        g.addEdge(e);
//        GraphView gv = graphModel.createView();
//        graphModel.setVisibleView(gv);
//        drawable = VizController.getInstance().getDrawable();
//        centerPanel.add(drawable.getGraphComponent(), BorderLayout.CENTER);

    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
