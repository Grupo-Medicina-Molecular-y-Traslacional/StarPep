/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.db.filters.impl;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import javax.swing.JPanel;
import org.bapedis.core.spi.filters.Filter;
import org.bapedis.core.spi.filters.FilterSetupUI;
import org.bapedis.core.spi.filters.impl.FilterOperator;
import org.bapedis.core.spi.filters.impl.StringFilterOperator;
import org.bapedis.db.model.AnnotationType;

/**
 *
 * @author loge
 */
public class AnnotationFilterSetupUI extends javax.swing.JPanel implements FilterSetupUI {

    protected AnnotationFilter annotationFilter;
    protected boolean validState;
    protected final PropertyChangeSupport changeSupport;

    /**
     * Creates new form AnnotationFilterSetupUI
     */
    public AnnotationFilterSetupUI() {
        initComponents();
        changeSupport = new PropertyChangeSupport(this);
        for(AnnotationType annotationType: AnnotationType.values()){
            annotationComboBox.addItem(annotationType);
        }
        for(FilterOperator operator: StringFilterOperator.values()){
            opComboBox.addItem(operator);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        attrLabel = new javax.swing.JLabel();
        annotationComboBox = new javax.swing.JComboBox();
        opLabel = new javax.swing.JLabel();
        opComboBox = new javax.swing.JComboBox();
        valueLabel = new javax.swing.JLabel();
        valueTextField = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        notCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(attrLabel, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.attrLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        add(attrLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(annotationComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(opLabel, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.opLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        add(opLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(opComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(valueLabel, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.valueLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        add(valueLabel, gridBagConstraints);

        valueTextField.setText(org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.valueTextField.text")); // NOI18N
        valueTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(valueTextField, gridBagConstraints);

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.errorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(errorLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(matchCaseCheckBox, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.matchCaseCheckBox.text")); // NOI18N
        matchCaseCheckBox.setMargin(new java.awt.Insets(2, 0, 2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(matchCaseCheckBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(notCheckBox, org.openide.util.NbBundle.getMessage(AnnotationFilterSetupUI.class, "AnnotationFilterSetupUI.notCheckBox.text")); // NOI18N
        notCheckBox.setMargin(new java.awt.Insets(2, 0, 2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(notCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox annotationComboBox;
    private javax.swing.JLabel attrLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JCheckBox notCheckBox;
    private javax.swing.JComboBox opComboBox;
    private javax.swing.JLabel opLabel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public JPanel getEditPanel(Filter filter) {
        annotationFilter = (AnnotationFilter)filter;
        
        return this;
    }

    @Override
    public void finishSettings() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cancelSettings() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isValidState() {
        return validState;
    }

    @Override
    public void addValidStateListener(PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    @Override
    public void removeValidStateListener(PropertyChangeListener listener) {
        changeSupport.removePropertyChangeListener(listener);
    }
}
