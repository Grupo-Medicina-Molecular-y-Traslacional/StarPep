/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.db.ui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import org.bapedis.core.services.ProjectManager;
import org.bapedis.core.events.WorkspaceEventListener;
import org.bapedis.core.model.Workspace;
import org.bapedis.db.services.NeoPeptideManager;
import org.bapedis.db.filters.spi.FilterFactory;
import org.bapedis.db.model.BioCategory;
import org.bapedis.db.model.FilterModel;
import org.bapedis.db.ui.actions.AddFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.DropDownButtonFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bapedis.db.ui//FilterExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FilterExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bapedis.db.ui.FilterExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FilterExplorerAction",
        preferredID = "FilterExplorerTopComponent"
)
@Messages({
    "CTL_FilterExplorerAction=FilterExplorer",
    "CTL_FilterExplorerTopComponent=Filter Explorer",
    "HINT_FilterExplorerTopComponent=This is a FilterExplorer window"
})
public final class FilterExplorerTopComponent extends TopComponent implements WorkspaceEventListener, LookupListener, PropertyChangeListener, ExplorerManager.Provider {

    protected final ExplorerManager filterModelManager;
    protected final ProjectManager pc;
    protected Lookup.Result<FilterModel> projectLkpResult;
    protected Lookup.Result<FilterModel> workspaceLkpResult;
    protected final String NO_FILTER = NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.filterModelComboBox.none");

    public FilterExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_FilterExplorerTopComponent());
        setToolTipText(Bundle.HINT_FilterExplorerTopComponent());

        filterModelManager = new ExplorerManager();
        associateLookup(ExplorerUtils.createLookup(filterModelManager, getActionMap()));
        pc = Lookup.getDefault().lookup(ProjectManager.class);
        projectLkpResult = pc.getLookup().lookupResult(FilterModel.class);
        projectLkpResult.addLookupListener(this);

        filterModelComboBox.addItem(NO_FILTER);
        for (FilterModel.RestrictionLevel restriction : FilterModel.RestrictionLevel.values()) {
            restrictiveComboBox.addItem(restriction);
        }
        restrictiveComboBox.setSelectedIndex(0);
        filterToolBar1.add(createEditFilterModelButton());

        filterToolBar2.add(createAddFilterButton());
        List<? extends Action> actions = Utilities.actionsForPath("Actions/EditFilter");
        for (Action action : actions) {
            filterToolBar2.add(action);
        }
        viewerScrollPane.setViewportView(new ListView());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        viewerScrollPane = new javax.swing.JScrollPane();
        autoApplyCheckBox = new javax.swing.JCheckBox();
        filterToolBar2 = new javax.swing.JToolBar();
        runButton = new javax.swing.JButton();
        filterToolBar1 = new javax.swing.JToolBar();
        filterModelComboBox = new javax.swing.JComboBox();
        restrictiveComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        viewerScrollPane.setPreferredSize(new java.awt.Dimension(100, 177));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(viewerScrollPane, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(autoApplyCheckBox, org.openide.util.NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.autoApplyCheckBox.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(autoApplyCheckBox, gridBagConstraints);

        filterToolBar2.setFloatable(false);
        filterToolBar2.setRollover(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(filterToolBar2, gridBagConstraints);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/db/resources/run.gif"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(runButton, gridBagConstraints);

        filterToolBar1.setFloatable(false);
        filterToolBar1.setRollover(true);

        filterModelComboBox.setMinimumSize(new java.awt.Dimension(110, 20));
        filterModelComboBox.setPreferredSize(new java.awt.Dimension(110, 20));
        filterModelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterModelComboBoxActionPerformed(evt);
            }
        });
        filterToolBar1.add(filterModelComboBox);

        restrictiveComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restrictiveComboBoxActionPerformed(evt);
            }
        });
        filterToolBar1.add(restrictiveComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(filterToolBar1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void restrictiveComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restrictiveComboBoxActionPerformed
        if (filterModelComboBox.getSelectedItem() instanceof FilterModel) {
            FilterModel filterModel = (FilterModel) filterModelComboBox.getSelectedItem();
            filterModel.setRestriction((FilterModel.RestrictionLevel) restrictiveComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_restrictiveComboBoxActionPerformed

    private void filterModelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterModelComboBoxActionPerformed
        Workspace currentWs = pc.getCurrentWorkspace();
        FilterModel currentfilterModel = currentWs.getLookup().lookup(FilterModel.class);
        if (workspaceLkpResult != null) {
            workspaceLkpResult.removeLookupListener(this);
        }
        try {
            if (currentfilterModel != null) {
                currentWs.remove(currentfilterModel);
                currentfilterModel.removePropertyChangeListener(this);
            }
            if (filterModelComboBox.getSelectedItem() instanceof FilterModel) {
                FilterModel selectedFilterModel = (FilterModel) filterModelComboBox.getSelectedItem();
                currentWs.add(selectedFilterModel);
                selectedFilterModel.addPropertyChangeListener(this);
                restrictiveComboBox.setSelectedItem(selectedFilterModel.getRestriction());
                restrictiveComboBox.setVisible(true);
                filterModelManager.setRootContext(selectedFilterModel.getRootContext());
            } else {
                restrictiveComboBox.setSelectedItem(null);
                restrictiveComboBox.setVisible(false);
                filterModelManager.setRootContext(Node.EMPTY);
            }
        } finally {
            if (workspaceLkpResult != null) {
                workspaceLkpResult.addLookupListener(this);
            }
        }
    }//GEN-LAST:event_filterModelComboBoxActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        run();
    }//GEN-LAST:event_runButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoApplyCheckBox;
    private javax.swing.JComboBox filterModelComboBox;
    private javax.swing.JToolBar filterToolBar1;
    private javax.swing.JToolBar filterToolBar2;
    private javax.swing.JComboBox restrictiveComboBox;
    private javax.swing.JButton runButton;
    private javax.swing.JScrollPane viewerScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        pc.addWorkspaceEventListener(this);
        Workspace currentWs = pc.getCurrentWorkspace();
        workspaceChanged(null, currentWs);
    }

    @Override
    public void componentClosed() {
        pc.removeWorkspaceEventListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setFilterModel(Workspace workspace) {
        FilterModel filterModel = workspace.getLookup().lookup(FilterModel.class);
        ActionListener actionListener = filterModelComboBox.getActionListeners()[0];
        filterModelComboBox.removeActionListener(actionListener);
        try {
            if (filterModelComboBox.getSelectedItem() instanceof FilterModel) {
                FilterModel oldFilterModel = (FilterModel) filterModelComboBox.getSelectedItem();
                oldFilterModel.removePropertyChangeListener(this);
            }
            if (filterModel != null) {
                filterModelComboBox.setSelectedItem(filterModel);
                filterModel.addPropertyChangeListener(this);
                restrictiveComboBox.setSelectedItem(filterModel.getRestriction());
                restrictiveComboBox.setVisible(true);
                filterModelManager.setRootContext(filterModel.getRootContext());
            } else {
                filterModelComboBox.setSelectedItem(NO_FILTER);
                restrictiveComboBox.setSelectedItem(null);
                restrictiveComboBox.setVisible(false);
                filterModelManager.setRootContext(Node.EMPTY);
            }
        } finally {
            filterModelComboBox.addActionListener(actionListener);
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (le.getSource().equals(projectLkpResult)) {
            Collection<? extends FilterModel> filterModels = projectLkpResult.allInstances();

            for (FilterModel filterModel : filterModels) {
                boolean found = false;
                for (int i = 0; i < filterModelComboBox.getItemCount() && !found; i++) {
                    if (filterModel.equals(filterModelComboBox.getItemAt(i))) {
                        found = true;
                    }
                }
                if (!found) {
                    filterModelComboBox.addItem(filterModel);
                }
            }

            boolean found = false;
            for (int i = 0; i < filterModelComboBox.getItemCount() && !found; i++) {
                if (filterModelComboBox.getItemAt(i) instanceof FilterModel) {
                    FilterModel filterModel = (FilterModel) filterModelComboBox.getItemAt(i);
                    if (!filterModels.contains(filterModel)) {
                        filterModelComboBox.removeItem(filterModel);
                        found = true;
                    }
                }
            }
        } else if (le.getSource().equals(workspaceLkpResult)) {
            setFilterModel(pc.getCurrentWorkspace());
        }
    }

    private JButton createEditFilterModelButton() {
        final JPopupMenu popup = new JPopupMenu();
        for (Action a : Utilities.actionsForPath("Actions/EditFilterModel")) {
            popup.add(a);
        }
        final JButton dropDownButton = DropDownButtonFactory.createDropDownButton(ImageUtilities.loadImageIcon("org/bapedis/db/resources/filterModel.png", false), popup);
        dropDownButton.setToolTipText(NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.editFilterModel.tooltiptext"));
        dropDownButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popup.show(dropDownButton, 0, dropDownButton.getHeight());
            }
        });
        return dropDownButton;
    }

    private JButton createAddFilterButton() {
        final JPopupMenu popup = new JPopupMenu();
        Collection<? extends FilterFactory> factories = Lookup.getDefault().lookupAll(FilterFactory.class);
        if (!factories.isEmpty()) {
            for (final FilterFactory factory : factories) {
                popup.add(new AddFilter(factory));
            }
        }

        final JButton dropDownButton = DropDownButtonFactory.createDropDownButton(ImageUtilities.loadImageIcon("org/bapedis/db/resources/add.png", false), popup);
        dropDownButton.setToolTipText(NbBundle.getMessage(FilterExplorerTopComponent.class, "FilterExplorerTopComponent.addFilter.tooltiptext"));
        dropDownButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popup.show(dropDownButton, 0, dropDownButton.getHeight());
            }
        });
        return dropDownButton;
    }

    @Override
    public void workspaceChanged(Workspace oldWs, Workspace newWs) {
        if (workspaceLkpResult != null) {
            workspaceLkpResult.removeLookupListener(this);
        }
        workspaceLkpResult = newWs.getLookup().lookupResult(FilterModel.class);
        workspaceLkpResult.addLookupListener(this);
        setFilterModel(newWs);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() instanceof FilterModel) {
            if (evt.getPropertyName() == FilterModel.NAME) {
                filterModelComboBox.repaint();
            }
//            else if (evt.getPropertyName().equals(FilterModel.IS_EMPTY)){
//                FilterModel filterModel = (FilterModel)evt.getSource();
//                boolean isEmpty = filterModel.isEmpty();
//                if (isEmpty){
//                    
//                }
//            }
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return filterModelManager;
    }

    private void run() {
        final NeoPeptideModelTopComponent tcPeptide = (NeoPeptideModelTopComponent) WindowManager.getDefault().findTopComponent("NeoPeptideModelTopComponent");
        tcPeptide.setBusyLabel();
        tcPeptide.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        tcPeptide.open();
        tcPeptide.requestActive();
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    NeoPeptideManager npc = Lookup.getDefault().lookup(NeoPeptideManager.class);
                    Workspace currentWs = pc.getCurrentWorkspace();
                    npc.setNeoPeptidesTo(currentWs, true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    tcPeptide.setErrorLabel();
                } finally {
                    tcPeptide.setCursor(Cursor.getDefaultCursor());
                }
            }
        });
    }
}
