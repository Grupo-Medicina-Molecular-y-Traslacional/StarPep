/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bapedis.network.impl.wizard;

import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.bapedis.core.ui.components.richTooltip.RichTooltip;
import org.bapedis.network.impl.CSNAlgorithm;
import org.bapedis.network.impl.SequenceClustering;
import org.openide.util.NbBundle;

public final class CSNVisualPanel1 extends JPanel {

    private final SequenceClustering seqClustering;
    private final RichTooltip pidRichTooltip;

    /**
     * Creates new form CSNVisualPanel1
     */
    public CSNVisualPanel1(CSNAlgorithm csnAlgo) {
        seqClustering = csnAlgo.getSeqClustering();
        initComponents();

        jATComboBox.setSelectedIndex(seqClustering.getAlignmentTypeIndex());
        jSMComboBox.setSelectedIndex(seqClustering.getSubstitutionMatrixIndex());

        jPIDSlider.setMinimum(SequenceClustering.PID_MIN);
        jPIDSlider.setMaximum(SequenceClustering.PID_MAX);

        //Label table
        Hashtable<Integer, JLabel> labelTable = new Hashtable<>();
        labelTable.put(SequenceClustering.PID_REFS[0], new JLabel(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidSlider.low")));
        labelTable.put(SequenceClustering.PID_REFS[1], new JLabel(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidSlider.middle")));
        labelTable.put(SequenceClustering.PID_REFS[2], new JLabel(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidSlider.high")));

        jPIDSlider.setLabelTable(labelTable);
        jPIDLabel.setText(seqClustering.getPercentIdentity() + "%");
        jPIDSlider.setValue(seqClustering.getPercentIdentity());

        pidRichTooltip = new RichTooltip();
        pidRichTooltip.setTitle(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidInfo.title"));
        pidRichTooltip.addDescriptionSection(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidInfo1.text"));
        pidRichTooltip.addDescriptionSection(NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.pidInfo2.text"));
    }

    @Override
    public String getName() {
        return "Step #1";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jATComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSMComboBox = new javax.swing.JComboBox();
        jPIDInfoLabel = new javax.swing.JLabel();
        jPIDSlider = new javax.swing.JSlider();
        jLessButton = new javax.swing.JButton();
        jMoreButton = new javax.swing.JButton();
        jPIDLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jLabel1, gridBagConstraints);

        jATComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Needleman-Wunsch", "Smith-Waterman" }));
        jATComboBox.setSelectedIndex(-1);
        jATComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jATComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jATComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jLabel2, gridBagConstraints);

        jSMComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blosum 30 by Henikoff & Henikoff", "Blosum 35 by Henikoff & Henikoff", "Blosum 40 by Henikoff & Henikoff", "Blosum 45 by Henikoff & Henikoff", "Blosum 50 by Henikoff & Henikoff", "Blosum 55 by Henikoff & Henikoff", "Blosum 60 by Henikoff & Henikoff", "Blosum 62 by Henikoff & Henikoff", "Blosum 65 by Henikoff & Henikoff", "Blosum 70 by Henikoff & Henikoff", "Blosum 75 by Henikoff & Henikoff", "Blosum 80 by Henikoff & Henikoff", "Blosum 85 by Henikoff & Henikoff", "Blosum 90 by Henikoff & Henikoff", "Blosum 100 by Henikoff & Henikoff", "PAM 250 by Gonnet, Cohen & Benner", "PAM 250 by Dayhoff" }));
        jSMComboBox.setSelectedIndex(-1);
        jSMComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSMComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jSMComboBox, gridBagConstraints);

        jPIDInfoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bapedis/network/resources/info.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jPIDInfoLabel, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jPIDInfoLabel.text")); // NOI18N
        jPIDInfoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPIDInfoLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPIDInfoLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jPIDInfoLabel, gridBagConstraints);

        jPIDSlider.setMajorTickSpacing(10);
        jPIDSlider.setMaximum(90);
        jPIDSlider.setMinimum(50);
        jPIDSlider.setMinorTickSpacing(5);
        jPIDSlider.setPaintLabels(true);
        jPIDSlider.setPaintTicks(true);
        jPIDSlider.setToolTipText(org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jPIDSlider.toolTipText")); // NOI18N
        jPIDSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jPIDSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jPIDSlider, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLessButton, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jLessButton.text")); // NOI18N
        jLessButton.setToolTipText(org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jLessButton.toolTipText")); // NOI18N
        jLessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLessButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jLessButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jMoreButton, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jMoreButton.text")); // NOI18N
        jMoreButton.setToolTipText(org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jMoreButton.toolTipText")); // NOI18N
        jMoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoreButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jMoreButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jPIDLabel, org.openide.util.NbBundle.getMessage(CSNVisualPanel1.class, "CSNVisualPanel1.jPIDLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jPIDLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jATComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jATComboBoxActionPerformed
        seqClustering.setAlignmentTypeIndex(jATComboBox.getSelectedIndex());
        switch (seqClustering.getAlignerType()) {
            case LOCAL:
                jPIDLabel.setToolTipText("Identities * 100 / Length of shorter sequence");

                break;
            case GLOBAL:
                jPIDLabel.setToolTipText("Identities * 100 / Columns");
                break;
        }
    }//GEN-LAST:event_jATComboBoxActionPerformed

    private void jSMComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSMComboBoxActionPerformed
        seqClustering.setSubstitutionMatrixIndex(jSMComboBox.getSelectedIndex());
    }//GEN-LAST:event_jSMComboBoxActionPerformed

    private void jPIDSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jPIDSliderStateChanged
        if (!jPIDSlider.getValueIsAdjusting()) {
            jPIDLabel.setText(jPIDSlider.getValue() + "%");
        }
    }//GEN-LAST:event_jPIDSliderStateChanged

    private void jPIDInfoLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPIDInfoLabelMouseEntered
        pidRichTooltip.showTooltip(jPIDInfoLabel, evt.getLocationOnScreen());
    }//GEN-LAST:event_jPIDInfoLabelMouseEntered

    private void jPIDInfoLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPIDInfoLabelMouseExited
        pidRichTooltip.hideTooltip();
    }//GEN-LAST:event_jPIDInfoLabelMouseExited

    private void jLessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLessButtonActionPerformed
        int pid = jPIDSlider.getValue();
        if (pid > jPIDSlider.getMinimum()) {
            jPIDSlider.setValue(pid - 1);
        }
    }//GEN-LAST:event_jLessButtonActionPerformed

    private void jMoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoreButtonActionPerformed
        int pid = jPIDSlider.getValue();
        if (pid < jPIDSlider.getMaximum()) {
            jPIDSlider.setValue(pid + 1);
        }
    }//GEN-LAST:event_jMoreButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jATComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jLessButton;
    private javax.swing.JButton jMoreButton;
    private javax.swing.JLabel jPIDInfoLabel;
    private javax.swing.JLabel jPIDLabel;
    private javax.swing.JSlider jPIDSlider;
    private javax.swing.JComboBox jSMComboBox;
    // End of variables declaration//GEN-END:variables
}
